{
  "itemGroup.alchemancy": "Alchemancy",
  "itemGroup.alchemancy_properties": "Alchemancy Properties",

  "block.alchemancy.blazebloom": "Blazebloom",
  "block.alchemancy.cloudelion": "Cloudelion",
  "block.alchemancy.glowshroom": "Glowshroom",
  "block.alchemancy.hydrolily": "Hydrolily",
  "block.alchemancy.crackling_cloudelion": "Crackling Cloudelion",
  "block.alchemancy.shivering_hydrolily": "Shivering Hydrolily",
  "block.alchemancy.daybloom": "Daybloom",
  "block.alchemancy.nightshade": "Nightshade",
  "block.alchemancy.snapthorn": "Snapthorn",

  "block.alchemancy.potted_blazebloom": "Potted Blazebloom",

  "block.alchemancy.essence_extractor": "Essence Extractor",
  "block.alchemancy.essence_tank": "Essence Tank",
  "block.alchemancy.essence_conduit": "Essence Conduit",
  "block.alchemancy.essence_injector": "Essence Injector",
  "block.alchemancy.infusion_pedestal": "Infusion Pedestal",
  "block.alchemancy.alchemancy_forge": "Alchemancy Forge",
  "block.alchemancy.alchemancy_catalyst": "Alchemancy Catalyst",

  "block.alchemancy.lead_block": "Block of Lead",
  "block.alchemancy.dreamsteel_block": "Block of Dreamsteel",

  "block.alchemancy.phantom_membrane_block": "Phantom Membrane Block",
  "block.alchemancy.flat_hopper": "Flat Hopper",
  "block.alchemancy.gust_basket": "Gust Basket",
  "block.alchemancy.chromachine": "Chromachine",

  "block.alchemancy.chromachine.cannot_tint": "This item does not support tinting!",
  "block.alchemancy.chromachine.cannot_infuse": "You cannot tint uninfusable items!",
  "block.alchemancy.chromachine.cannot_tint_disguised": "You cannot tint disguised items, tint the disguise source instead!",

  "block.alchemancy.rooted_item": "Rooted Item",
  "block.alchemancy.sculk_bud": "Sculk Bud",
  "block.alchemancy.glowing_orb": "Glowing Orb",

  "item.alchemancy.alchemical_extract": "Alchemical Extract",
  "item.alchemancy.blazing_substance": "Blazing Substance",
  "item.alchemancy.gusty_substance": "Gusty Substance",
  "item.alchemancy.earthen_substance": "Earthen Substance",
  "item.alchemancy.tidal_substance": "Tidal Substance",
  "item.alchemancy.sparking_substance": "Sparking Substance",
  "item.alchemancy.chilling_substance": "Chilling Substance",
  "item.alchemancy.leafy_substance": "Leafy Substance",
  "item.alchemancy.glowing_substance": "Glowing Substance",
  "item.alchemancy.dim_substance": "Dim Substance",
  "item.alchemancy.spectral_substance": "Spectral Substance",
  "item.alchemancy.pulsating_substance": "Pulsating Substance",

  "item.alchemancy.infusion_codex": "Infusion Codex",

  "item.alchemancy.lead_ingot": "Lead Ingot",
  "item.alchemancy.lead_nugget": "Lead Nugget",
  "item.alchemancy.lead_pickaxe": "Lead Pickaxe",
  "item.alchemancy.lead_sword": "Lead Sword",
  "item.alchemancy.lead_axe": "Lead Axe",
  "item.alchemancy.lead_shovel": "Lead Shovel",
  "item.alchemancy.lead_hoe": "Lead Hoe",
  "item.alchemancy.lead_helmet": "Lead Helmet",
  "item.alchemancy.lead_chestplate": "Lead Chestplate",
  "item.alchemancy.lead_leggings": "Lead Leggings",
  "item.alchemancy.lead_boots": "Lead Boots",
  "item.alchemancy.lead_apple": "Leaden Apple",

  "item.alchemancy.dreamsteel_ingot": "Dreamsteel Ingot",
  "item.alchemancy.dreamsteel_nugget": "Dreamsteel Nugget",
  "item.alchemancy.dreamsteel_sword": "Dreamsteel Sword",
  "item.alchemancy.dreamsteel_pickaxe": "Dreamsteel Pickaxe",
  "item.alchemancy.dreamsteel_axe": "Dreamsteel Axe",
  "item.alchemancy.dreamsteel_shovel": "Dreamsteel Shovel",
  "item.alchemancy.dreamsteel_hoe": "Dreamsteel Hoe",
  "item.alchemancy.dreamsteel_helmet": "Dreamsteel Helmet",
  "item.alchemancy.dreamsteel_chestplate": "Dreamsteel Chestplate",
  "item.alchemancy.dreamsteel_leggings": "Dreamsteel Leggings",
  "item.alchemancy.dreamsteel_boots": "Dreamsteel Boots",

  "item.alchemancy.dreamsteel_bow": "Dreamsteel Bow",
  "item.alchemancy.infusion_flask": "Infusion Flask",

  "item.alchemancy.black_hole_sword": "Black Hole Cleaver",
  "item.alchemancy.black_hole_pickaxe": "Black Hole Perforator",
  "item.alchemancy.black_hole_axe": "Black Hole Deforester",
  "item.alchemancy.black_hole_shovel": "Black Hole Excavator",
  "item.alchemancy.black_hole_hoe": "Black Hole Reaper",
  "item.alchemancy.black_hole_tool.bound_to_block": "Target Block: [%s]",

  "item.alchemancy.blank_pearl": "Blank Pearl",
  "item.alchemancy.revealing_pearl": "Revealing Pearl",
  "item.alchemancy.paradox_pearl": "Paradox Pearl",
  "item.alchemancy.void_pearl": "Void Pearl",
  "item.alchemancy.entangled_singularity": "Entangled Singularity",

  "item.alchemancy.chroma_lens": "Chroma Lens",
  "item.alchemancy.microscopic_lens": "Microscopic Lens",
  "item.alchemancy.macroscopic_lens": "Macroscopic Lens",

  "item.alchemancy.pearlescent_ring": "Pearlescent Ring",
  "item.alchemancy.eternal_glow_ring": "Ring of Eternal Glow",
  "item.alchemancy.phasing_ring": "Ring of Phasing",
  "item.alchemancy.undying_ring": "Ring of Undying",
  "item.alchemancy.friendship_ring": "Ring of Friendship",
  "item.alchemancy.voidless_ring": "Ring of the Voidless",
  "item.alchemancy.attraction_ring": "Ring of Attraction",

  "item.alchemancy.sparkling_band": "Band of Sparkling",

  "item.alchemancy.property_visor": "Property Visor",
  "item.alchemancy.tinted_glasses": "Tinted Glasses",

  "item.alchemancy.nimbus_belt": "Nimbus Belt",
  "item.alchemancy.crystal_storm_belt": "Belt of the Crystal Storm",
  "item.alchemancy.shifting_lightning_belt": "Belt of the Shifting Lightning",

  "item.alchemancy.flamewakers": "Flamewakers",
  "item.alchemancy.tidewalker_treads": "Tidewalker Treads",
  "item.alchemancy.hardlight_steps": "Hardlight Steps",
  "item.alchemancy.mechanical_boots": "Mechanical Boots",

  "item.alchemancy.wayward_medallion": "Wayward Medallion",
  "item.alchemancy.wayward_medallion.bound_to_player": "Bound to: %s",
  "item.alchemancy.wayward_medallion.bound_to_position": "Bound to: (%s, %s, %s)",
  "item.alchemancy.wayward_medallion.in": "in \"%s\"",

  "item.alchemancy.leaden_apple": "Leaden Apple",
  "item.alchemancy.leaden_sponge": "Leaden Sponge",
  "item.alchemancy.divine_sponge": "Divine Sponge",
  "item.alchemancy.vaultpick": "Vault-Pick",
  "item.alchemancy.binding_key": "Key of Binding",
  "item.alchemancy.spinner_spanner": "Spinner Spanner",
  "item.alchemancy.quantum_spanner": "Quantum Spanner",

  "item.alchemancy.unshaped_clay": "Unshaped Clay",
  "item.alchemancy.unshaped_clay.tooltip": "Smelt or combine with a Clay Ball to restore [%s]",

  "item.alchemancy.rocket_powered_hammer": "Rocket-Powered Hammer",
  "item.alchemancy.barrels_warhammer": "Barrel's Warhammer",
  "item.alchemancy.home_run_bat": "Home Run Bat",
  "item.alchemancy.bada_bat": "Badadamadabat",
  "item.alchemancy.feral_blade": "Feral Blade",
  "item.alchemancy.hot_rod": "Hot Rod",
  "item.alchemancy.molten_core_perforator": "Molten Core Perforator",

  "item.alchemancy.pocket_black_hole": "Pocket Black Hole",
  "item.alchemancy.ceaseless_void_bag": "Bag of the Ceaseless Void",
  "item.alchemancy.telekinetic_glove": "Telekinetic Glove",

  "item.alchemancy.property_capsule": "Property Capsule",
  "item.alchemancy.property_capsule.ingredient": "Infused Property",

  "item.alchemancy.tooltip.stored_properties": "Stored Properties:",
  "item.alchemancy.tooltip.dormant_properties": "Dormant Properties:",

  "recipe.alchemancy.item_transmutation": "Item Transmutation",
  "recipe.alchemancy.item_forging": "Item Forging",
  "recipe.alchemancy.property_forging": "Property Forging",
  "recipe.alchemancy.property_warping": "Property Warping",
  "recipe.alchemancy.property_interactions": "Property Interactions",
  "recipe.alchemancy.dormant_properties": "Dormant Properties",
  "recipe.alchemancy.dormant_properties.info": "This property can be obtained through the infusion of an unknown item.",
  "recipe.alchemancy.voidborn.info": "The §5Voidborn§r property can be obtained by tossing an item infused with §2Undying§r and §2Depth Dweller§r into the void.",

  "commands.alchemancy:infuse.failed": "Nothing changed. Targets either have no item in their hands or the infusion could not be applied",
  "commands.alchemancy:infuse.failed.entity": "%s is not a valid entity for this command",
  "commands.alchemancy:infuse.failed.itemless": "%s is not holding any item",
  "commands.alchemancy:infuse.success.multiple": "Applied infusion %s to %s entities",
  "commands.alchemancy:infuse.success.single": "Applied infusion %s to %s's item",

  "essence.alchemancy.pyro": "Pyro",
  "essence.alchemancy.aero": "Aero",
  "essence.alchemancy.terra": "Terra",
  "essence.alchemancy.hydro": "Hydro",
  "essence.alchemancy.electro": "Electro",
  "essence.alchemancy.cryo": "Cryo",
  "essence.alchemancy.plasma": "Plasma",
  "essence.alchemancy.dendro": "Dendro",
  "essence.alchemancy.photo": "Photo",
  "essence.alchemancy.umbra": "Umbra",
  "essence.alchemancy.spectra": "Spectra",
  "essence.alchemancy.tempora": "Tempora",
  "essence.alchemancy.neuro": "Neuro",
  "essence.alchemancy.sonora": "Sonora",
  "essence.alchemancy.crea": "Crea",

  "property.detail": "%s [%s]",
  "property.crackling_detail": "%s [%s %s]",
  "property.detail.percentage": "%s%%",
  "property.detail.item_count": "%s x%s",
  "property.detail.fe": "%s/%s FE",
  "property.detail.uses_left": "%s uses",
  "property.detail.needs_refueling": "Needs refueling!",
  "property.detail.global_position": "(%s, %s, %s) in \"%s\"",
  "property.detail.block_position": "%s, %s, %s",
  "property.detail.star": "★",
  "property.detail.color": "#%s",

  "property.disabled": "%s (Disabled)",

  "property.alchemancy.tinted": "Tinted",
  "property.alchemancy.resized": "Resized",
  "property.alchemancy.resized.increase": "Resized [+10%]",
  "property.alchemancy.resized.decrease": "Resized [-10%]",
  "property.alchemancy.flattened": "Flattened",
  "property.alchemancy.enchanted": "Foil",
  "property.alchemancy.magical_concealment": "Magical Concealment",
  "property.alchemancy.tinted_lens": "Tinted Lens",
  "property.alchemancy.chromatize": "Chromatize",
  "property.alchemancy.revealing": "Revealing",
  "property.alchemancy.revealed": "Revealed",
  "property.alchemancy.scrambled": "Scrambled",
  "property.alchemancy.seethrough": "Seethrough",
  "property.alchemancy.concealed": "Concealed",
  "property.alchemancy.disguised": "Disguised",
  "property.alchemancy.sparkling": "Sparkling",

  "property.alchemancy.burning": "Burning",
  "property.alchemancy.frosted": "Frosted",
  "property.alchemancy.wet": "Wet",
  "property.alchemancy.shocking": "Shocking",
  "property.alchemancy.crackling": "Crackling",

  "property.alchemancy.flammable": "Flammable",
  "property.alchemancy.charred": "Charred",
  "property.alchemancy.sturdy": "Sturdy",
  "property.alchemancy.brittle": "Brittle",
  "property.alchemancy.ferrous": "Ferrous",
  "property.alchemancy.rusty": "Rusty",
  "property.alchemancy.gilded": "Gilded",
  "property.alchemancy.energized": "Energized",
  "property.alchemancy.lustrous": "Lustrous",
  "property.alchemancy.wealthy": "Wealthy",
  "property.alchemancy.pristine": "Pristine",
  "property.alchemancy.hellbent": "Hellbent",
  "property.alchemancy.depth_dweller": "Depth Dweller",
  "property.alchemancy.athletic": "Athletic",
  "property.alchemancy.lazy": "Lazy",
  "property.alchemancy.anchored": "Anchored",
  "property.alchemancy.sparking": "Sparking",
  "property.alchemancy.loose": "Loose",
  "property.alchemancy.hardened": "Hardened",
  "property.alchemancy.malleable": "Malleable",
  "property.alchemancy.clay_mold": "Clay Mold",
  "property.alchemancy.cracked": "Cracked",

  "property.alchemancy.extended": "Extended",
  "property.alchemancy.calcareous": "Calcareous",
  "property.alchemancy.sharp": "Sharp",
  "property.alchemancy.weak": "Weak",
  "property.alchemancy.dense": "Dense",
  "property.alchemancy.gambling": "Gambling",
  "property.alchemancy.warding": "Warding",
  "property.alchemancy.reinforced": "Reinforced",
  "property.alchemancy.enchanting": "Enchanting",
  "property.alchemancy.experienced": "Experienced",
  "property.alchemancy.wise": "Wise",
  "property.alchemancy.clueless": "Clueless?",
  "property.alchemancy.feral": "Feral",

  "property.alchemancy.cozy": "Cozy",
  "property.alchemancy.insulated": "Insulated",
  "property.alchemancy.waterproof": "Waterproof",
  "property.alchemancy.blast_resistant": "Blast Resistant",
  "property.alchemancy.fire_resistant": "Fire Resistant",
  "property.alchemancy.magic_resistant": "Magic Resistant",
  "property.alchemancy.eternal": "Eternal",
  "property.alchemancy.muffled": "Muffled",

  "property.alchemancy.undead": "Undead",
  "property.alchemancy.photosynthetic": "Photosynthetic",
  "property.alchemancy.kinetic_recharge": "Kinetic Recharge",
  "property.alchemancy.rooted": "Rooted",
  "property.alchemancy.exploding": "Exploding",
  "property.alchemancy.wind_charged": "Wind Charged",
  "property.alchemancy.smiting": "Smiting",
  "property.alchemancy.nonlethal": "Nonlethal",
  "property.alchemancy.mending": "Mending",
  "property.alchemancy.flourish": "Flourish",
  "property.alchemancy.solar_powered": "Solar Powered",
  "property.alchemancy.arcane": "Arcane",
  "property.alchemancy.ender": "Ender",
  "property.alchemancy.sculking": "Sculking",
  "property.alchemancy.targeted": "Targeted",
  "property.alchemancy.repelled": "Repelled",
  "property.alchemancy.light_seeking": "Light-Seeking",
  "property.alchemancy.magnetic": "Magnetic",
  "property.alchemancy.magnetic.format": "%s%s",
  "property.alchemancy.magnetic.a": "Magn",
  "property.alchemancy.magnetic.b": "etic",

  "property.alchemancy.bouncy": "Bouncy",
  "property.alchemancy.sticky": "Sticky",
  "property.alchemancy.grappling": "Grappling",
  "property.alchemancy.spiking": "Spiking",
  "property.alchemancy.launching": "Launching",
  "property.alchemancy.slippery": "Slippery",
  "property.alchemancy.flimsy": "Flimsy",
  "property.alchemancy.dexterous": "Dexterous",
  "property.alchemancy.dead": "Dead",
  "property.alchemancy.infected": "Infected",
  "property.alchemancy.sanitized": "Sanitized",
  "property.alchemancy.seeded": "Seeded",

  "property.alchemancy.lightweight": "Lightweight",
  "property.alchemancy.antigrav": "Anti-grav",
  "property.alchemancy.heavy": "Heavy",
  "property.alchemancy.buoyant": "Buoyant",

  "property.alchemancy.awkward": "Awkward",
  "property.alchemancy.poisonous": "Poisonous",
  "property.alchemancy.decaying": "Decaying",
  "property.alchemancy.tipsy": "Tipsy",
  "property.alchemancy.blinding": "Blinding",
  "property.alchemancy.glowing_aura": "Glowing Aura",
  "property.alchemancy.swift": "Swift",
  "property.alchemancy.sluggish": "Sluggish",
  "property.alchemancy.leaping": "Leaping",
  "property.alchemancy.nocturnal": "Nocturnal",
  "property.alchemancy.amphibious": "Amphibious",
  "property.alchemancy.aquatic": "Aquatic",
  "property.alchemancy.levitating": "Levitating",
  "property.alchemancy.ominous": "Ominous",
  "property.alchemancy.hearty": "Hearty",

  "property.alchemancy.soulbind": "Soulbind",
  "property.alchemancy.loyal": "Loyal",
  "property.alchemancy.spirit_bond": "Spirit Bond",
  "property.alchemancy.relentless": "Relentless",
  "property.alchemancy.energy_sapper": "Energy Sapper",
  "property.alchemancy.hungering": "Hungering",
  "property.alchemancy.cursed": "Cursed",
  "property.alchemancy.vengeful": "Vengeful",
  "property.alchemancy.vampiric": "Vampiric",
  "property.alchemancy.sentient": "Sentient",
  "property.alchemancy.spiritual": "Spiritual",
  "property.alchemancy.reincarnating": "Reincarnating",
  "property.alchemancy.phasing": "Phasing",
  "property.alchemancy.soul_harvester": "Soul Harvester",
  "property.alchemancy.parasitic": "Parasitic",

  "property.alchemancy.hollow": "Hollow",
  "property.alchemancy.encapsulating": "Encapsulating",
  "property.alchemancy.bucketing": "Bucketing",
  "property.alchemancy.capturing": "Capturing",
  "property.alchemancy.dripping": "Dripping",
  "property.alchemancy.absorbent": "Absorbent",
  "property.alchemancy.compact": "Compact",

  "property.alchemancy.tethered": "Tethered",
  "property.alchemancy.mining": "Mining",
  "property.alchemancy.chopping": "Chopping",
  "property.alchemancy.digging": "Digging",
  "property.alchemancy.reaping": "Reaping",
  "property.alchemancy.shearing": "Shearing",
  "property.alchemancy.firestarting": "Fire-starting",
  "property.alchemancy.slashing": "Slashing",
  "property.alchemancy.shielding": "Shielding",
  "property.alchemancy.sharpshooting": "Sharpshooting",
  "property.alchemancy.brushing": "Brushing",
  "property.alchemancy.scoping": "Scoping",
  "property.alchemancy.wayfinding": "Wayfinding",
  "property.alchemancy.headwear": "Headwear",
  "property.alchemancy.saddled": "Saddled",
  "property.alchemancy.glider": "Glider",

  "property.alchemancy.crafty": "Crafty",
  "property.alchemancy.stonecutting": "Stonecutting",
  "property.alchemancy.assembling": "Assembling",
  "property.alchemancy.assimilating": "Assimilating",
  "property.alchemancy.smelting": "Smelting",
  "property.alchemancy.replicating": "Replicating",

  "property.alchemancy.fragmented": "Fragmented",
  "property.alchemancy.fragmented.format": "%s%s",
  "property.alchemancy.fragmented.a": "Fragm",
  "property.alchemancy.fragmented.b": "ented",

  "property.alchemancy.jagged": "Jagged",
  "property.alchemancy.edible": "Edible",
  "property.alchemancy.sensitive": "Sensitive",
  "property.alchemancy.shattering": "Shattering",
  "property.alchemancy.toggleable": "Toggleable",
  "property.alchemancy.interactable": "Interactable",
  "property.alchemancy.throwable": "Throwable",
  "property.alchemancy.fungal": "Fungal",
  "property.alchemancy.sporadic": "Sporadic",
  "property.alchemancy.ticking": "Ticking",
  "property.alchemancy.running_start": "Running Start",

  "property.alchemancy.hydrophobic": "Hydrophobic",
  "property.alchemancy.allergic": "Allergic",
  "property.alchemancy.armor_pulse": "Armor Pulse",

  "property.alchemancy.undying": "Undying",
  "property.alchemancy.paradoxical": "Paradoxical",
  "property.alchemancy.limit_break": "Limit Break",
  "property.alchemancy.awakened": "Awakened",
  "property.alchemancy.enhanced": "Enhanced",
  "property.alchemancy.otherworldly": "Otherworldly",

  "property.alchemancy.conductive": "Conductive",
  "property.alchemancy.musical": "Musical",
  "property.alchemancy.sweet": "Sweet",
  "property.alchemancy.waxed": "Waxed",
  "property.alchemancy.warped": "Warped",
  "property.alchemancy.scary": "Scary",
  "property.alchemancy.dirty": "Dirty",
  "property.alchemancy.random": "Random",

  "property.alchemancy.voidborn": "Voidborn",
  "property.alchemancy.world_obliterator": "World Obliterator",
  "property.alchemancy.voidtouch": "Voidtouch",
  "property.alchemancy.ceaseless_void": "Ceaseless Void",
  "property.alchemancy.kinetic_grab": "Kinetic Grab",
  "property.alchemancy.vacuuming": "Vacuuming",
  "property.alchemancy.quantum_bind": "Quantum Bind",
  "property.alchemancy.item_pull": "Item Pull",

  "property.alchemancy.infusion_codex": "Infusion Codex",

  "property.alchemancy.auxiliary": "Auxiliary",
  "property.alchemancy.eternal_glow": "Eternal Glow",
  "property.alchemancy.phase_step": "Phase Step",
  "property.alchemancy.death_ward": "Death Ward",
  "property.alchemancy.friendly": "Friendly",

  "property.alchemancy.flame_step": "Flame Step",
  "property.alchemancy.flame_emperor": "Flame Emperor",
  "property.alchemancy.wave_rider": "Wave Rider",
  "property.alchemancy.armored_bastion": "Armored Bastion",
  "property.alchemancy.air_walker": "Air Walker",

  "property.alchemancy.cloud_dash": "Cloud Dash",
  "property.alchemancy.crystal_dash": "Crystal Dash",
  "property.alchemancy.blinking": "Blinking",
  "property.alchemancy.home_run": "Home Run!",
  "property.alchemancy.gust_jet": "Gust Jet",
  "property.alchemancy.rocket_powered": "Rocket-Powered",
  "property.alchemancy.wayward_warp": "Wayward Warp",
  "property.alchemancy.wayward_warp.dimension_missmatch": "The destination appears to be in another dimension...",
  "property.alchemancy.wayward_warp.missing_destination": "The destination appears to be missing...",
  "property.alchemancy.wayward_warp.obstructed_destination": "The destination appears to be obstructed...",

  "property.alchemancy.rotating": "Rotating",
  "property.alchemancy.infusion_cleanse": "Infusion Cleanse",
  "property.alchemancy.divine_cleanse": "Divine Cleanse",
  "property.alchemancy.binding": "Binding",
  "property.alchemancy.vaultpicking": "Vault-Picking",
  "property.alchemancy.unmovable": "Unmovable",

  "property.alchemancy.battery_powered": "Battery-Powered",
  "property.alchemancy.living_battery": "Living Battery",

  "property.alchemancy.entangled": "Entangled",
  "property.alchemancy.jump_entangled": "Jump-Entangled",
  "property.alchemancy.crouch_entangled": "Crouch-Entangled",
  "property.alchemancy.sprint_entangled": "Sprint-Entangled",
  "property.alchemancy.use_entangled": "Use-Entangled",
  "property.alchemancy.quantum_shift": "Quantum Shift",

  "death.attack.alchemancy.shock": "%s had a shock to their system",
  "death.attack.alchemancy.shock.mob": "%1$s was electrocuted by %2$s",
  "death.attack.alchemancy.shock.player": "%1$s was electrocuted by %2$s",
  "death.attack.alchemancy.shock.item": "%1$s was electrocuted by %2$s using %3$s",
  "death.attack.alchemancy.gamble": "%s died from a gambling addiction",
  "death.attack.alchemancy.gamble.mob": "%1$s gambled too hard whilst fighting %2$s",
  "death.attack.alchemancy.gamble.player": "%1$s gambled too hard whilst fighting %2$s",
  "death.attack.alchemancy.gamble.item": "%1$s gambled too hard whilst fighting %2$s",
  "death.attack.alchemancy.soul_escaped": "%s felt the wrath of a fleeing soul",
  "death.attack.alchemancy.voidtouch": "%s no longer exists",
  "death.attack.alchemancy.voidtouch.mob": "%1$s was removed from existence by %2$s",
  "death.attack.alchemancy.voidtouch.player": "%1$s was removed from existence by %2$s",
  "death.attack.alchemancy.voidtouch.item": "%1$s was removed from existence by %2$s using %3$s",
  "death.attack.alchemancy.parasitic": "%s's lifeforce was leeched dry",
  "death.attack.alchemancy.parasitic.mob": "%1$s's weapon turned on them whilst fighting %2$s",
  "death.attack.alchemancy.parasitic.player": "%1$s's weapon turned on them whilst fighting %2$s",
  "death.attack.alchemancy.parasitic.item": "%1$s's weapon turned on them whilst fighting %2$s",

  "advancements.alchemancy:discovery.root.title": "Infusion Discovery",
  "advancements.alchemancy:discovery.root.description": "Every Property you Infuse yourself will be catalogued here",

  "advancements.alchemancy:discovery.discover.title": "Discovered a Property",
  "advancements.alchemancy:discovery.discover.description": "You discovered this property! Check the Journal for more info",

  "advancements.story.alchemancy:alchemancing_time.title": "It's Alchemancing Time",
  "advancements.story.alchemancy:alchemancing_time.description": "Start the Alchemancy Forge by putting an Emerald Block above it and right-clicking it. Time to get Alchemancing!",
  "advancements.story.alchemancy:alchemical_breakthrough.title": "Alchemical Breakthrough",
  "advancements.story.alchemancy:alchemical_breakthrough.description": "Obtain Alchemical Extract by brewing a Blazebloom",
  "advancements.story.alchemancy:apply_property.title": "Endless Possibility",
  "advancements.story.alchemancy:apply_property.description": "Use the power of Alchemancy to turn anything into anything else!",
  "advancements.story.alchemancy:all_properties.title": "Alchemancy Master",
  "advancements.story.alchemancy:all_properties.description": "Discover and Infuse every Infusion Property onto any item. Now that's an incredible feat!",
  "advancements.story.alchemancy:find_netherite.title": "I Have A Dream...",
  "advancements.story.alchemancy:find_netherite.description": "Perhaps Netherite might have some alchemical applications...",
  "advancements.story.alchemancy:find_mace.title": "Stop, Hammertime!",
  "advancements.story.alchemancy:find_mace.description": "Maces are pretty cool. But with the power of Alchemancy, we can make them much cooler...",
  "advancements.story.alchemancy:discover_voidborn.title": "Echoes From The Abyss",
  "advancements.story.alchemancy:discover_voidborn.description": "Discover Voidborn by tossing an item with both Depth Dweller and Undying into the void",

  "subtitles.block.alchemancy_catalyst.activate": "Alchemancy Catalyst activates",
  "subtitles.block.alchemancy_catalyst.use": "Alchemancy Catalyst fires",
  "subtitles.block.glowing_orb.extinguish": "Glowing Orb extinguished",
  "subtitles.block.gust_basket.blow": "Gust Basket blows",
  "subtitles.block.phantom_membrane_block.pop": "Phantom Membrane Block pops",

  "screen.chromachine.title": "Item Chromatizing",
  "screen.chromachine.apply_hex": "Apply Hex",
  "screen.chromachine.reset": "Reset Color",

  "subtitles.property.heavy": "Heavy item landed",
  "subtitles.property.bouncy": "Bouncy item bounces",
  "subtitles.property.toggleable": "Toggleable item is toggled",
  "subtitles.property.ticking": "Ticking item clicks",
  "subtitles.property.smelting.recharge": "Smelting item is refueled",
  "subtitles.property.smelting.depleted": "Smelting item needs refueling",
  "subtitles.property.calcareous.milk": "Calcareous item gets milked",
  "subtitles.property.hollow.drop_contents": "Hollow item empties",
  "subtitles.property.hollow.insert": "Item packed",
  "subtitles.property.throwable": "Thrown item flies",
  "subtitles.property.loyal": "Loyal item returns",
  "subtitles.property.clueless": "Huh?",
  "subtitles.property.wayfinding": "Wayfinding item locks onto target",
  "subtitles.property.allergic": "Allergic item sneezes",
  "subtitles.property.clay_mold": "Unshaped Clay is restored",
  "subtitles.property.home_run.hit": "Home Run!!!",
  "subtitles.property.home_run.fail": "Foul Ball...",
  "subtitles.property.gust_jet": "Gust Jet item blows",

  "subtitles.property.bada_quip": "Bada says something funny B)",

  "dataPack.alchemancy.infused_loot": "Infused Loot",
  "dataPack.alchemancy.infused_loot.description": "Gives a chance for mob equipment and chest loot to have Infused Properties",

  "screen.infusion_codex.unlocked_counter": "  %s/%s",
  "screen.infusion_codex.search_bar": "Search...",
  "screen.infusion_codex.inspecting": "Inspecting Item",
  "screen.infusion_codex.locked_entry": "???",
  "screen.infusion_codex.locked_entry.tooltip": "This Infusion has not yet been discovered",
  "screen.infusion_codex.open_entry.tooltip": "Click to open entry",
  "screen.infusion_codex.undiscovered_items": "+%s",
  "screen.infusion_codex.undiscovered_items.tooltip": "%s unknown items",

  "screen.infusion_codex.sort_order": "Sort by: %s",
  "screen.infusion_codex.sort_order.alphabetical": "Alphabetical",
  "screen.infusion_codex.sort_button.alphabetical": "AZ",
  "screen.infusion_codex.sort_order.recency": "Last Read",
  "screen.infusion_codex.sort_button.recency": "LR",
  "screen.infusion_codex.sort_order.unlock": "Unlock Order",
  "screen.infusion_codex.sort_button.unlock": "UO",
  "screen.infusion_codex.inline_list_entry": "%s, ",
  "screen.infusion_codex.inline_list_entry.last": "and %s",

  "screen.infusion_codex.attribute_modifier": "Modifies Attributes",
  "screen.infusion_codex.on_attack": "On Attack",
  "screen.infusion_codex.on_attack.tooltip": "If the user performs a melee attack on a target while holding an item with this Infusion in their Main Hand. Or if a Projectile with this Infusion deals damage to an entity.",
  "screen.infusion_codex.on_crit": "On Critical Hit",
  "screen.infusion_codex.on_crit.tooltip": "If the user performs a critical attack on a target while holding an item with this Infusion in their Main Hand",
  "screen.infusion_codex.modify_damage": "When Dealing Damage",
  "screen.infusion_codex.on_kill": "On Kill",
  "screen.infusion_codex.on_kill.tooltip": "If the user kills a target while holding an item with this Infusion in their Main Hand. Or if a Projectile with this Infusion kills an entity.",
  "screen.infusion_codex.activate": "When {activate Activated}",
  "screen.infusion_codex.activate_by_block": "When {activate Activated} while {property alchemancy:rooted}",
  "screen.infusion_codex.when_hit_held": "When hit while Held",
  "screen.infusion_codex.when_hit_held.tooltip": "If the user receives an attack while an item with this Infusion in their Main Hand or Offhand",
  "screen.infusion_codex.when_hit_worn": "When hit while Worn",
  "screen.infusion_codex.when_hit_worn.tooltip": "If the user receives an attack while an item with this Infusion in any of their armor slots",
  "screen.infusion_codex.when_hit_equipped": "When hit while Equipped",
  "screen.infusion_codex.when_hit_equipped.tooltip": "If the user receives an attack while an item with this Infusion in any of their armor slots or being held in either hand",
  "screen.infusion_codex.when_hit_using": "When receiving damage while Using",
  "screen.infusion_codex.when_hit_using.tooltip": "If the user receives an attack while an item with this Infusion is being used",
  "screen.infusion_codex.receive_damage_held": "When receiving damage while Held",
  "screen.infusion_codex.receive_damage_worn": "When receiving damage while Worn",
  "screen.infusion_codex.receive_damage_worn_or_using": "When receiving damage while Worn or Using",
  "screen.infusion_codex.receive_damage_equipped": "When receiving damage while Equipped",
  "screen.infusion_codex.receive_damage_using": "When receiving damage while Using",
  "screen.infusion_codex.when_hit_worn_or_using": "When hit while Worn or Using",
  "screen.infusion_codex.while_worn_helmet": "While worn as a Helmet",
  "screen.infusion_codex.while_worn_chestplate": "While worn as a Chestplate",
  "screen.infusion_codex.while_worn_leggings": "While worn as Leggings",
  "screen.infusion_codex.while_worn_boots": "While worn as Boots",
  "screen.infusion_codex.while_worn_lower": "While worn as Leggings or Boots",
  "screen.infusion_codex.while_worn": "While Worn",
  "screen.infusion_codex.while_equipped": "While Equipped",
  "screen.infusion_codex.while_held": "While Held",
  "screen.infusion_codex.while_held_mainhand": "While held in the Main Hand",
  "screen.infusion_codex.while_held_offhand": "While held in the Offhand",
  "screen.infusion_codex.while_in_inventory": "While inside of a Player's Inventory",
  "screen.infusion_codex.while_rooted": "While {property alchemancy:rooted}",
  "screen.infusion_codex.while_rooted_unformatted": "While Rooted",
  "screen.infusion_codex.when_shot": "When shot as a Projectile",
  "screen.infusion_codex.when_shot_from_dispenser": "When shot from a {item Dispenser}",
  "screen.infusion_codex.when_dropped": "When dropped on the ground",
  "screen.infusion_codex.when_used": "When Used",
  "screen.infusion_codex.when_used_block": "When used on a Block",
  "screen.infusion_codex.when_used_entity": "When used on an Entity",
  "screen.infusion_codex.while_using": "While Being Used",
  "screen.infusion_codex.after_use": "After the item is Used",
  "screen.infusion_codex.block_destroyed": "When Breaking Blocks",
  "screen.infusion_codex.on_destroy": "When the item is Destroyed",
  "screen.infusion_codex.stacked_over": "Inventory Interactions",
  "screen.infusion_codex.stacked_over.tooltip": "When an item with this Infusion is held from within the Inventory and is Right-Clicked while hovering over a different item",
  "screen.infusion_codex.stacked_on": "When an Item is right-clicked over this one within the inventory",
  "screen.infusion_codex.pick_up": "When Picked Up",
  "screen.infusion_codex.pick_up_while_equipped": "When an Item is picked up while equipped",
  "screen.infusion_codex.pick_up_while_worn": "When an Item is picked up while worn",
  "screen.infusion_codex.pick_up_while_held": "When an Item is picked up while held",
  "screen.infusion_codex.durability_consumed": "On Durability Consumed",
  "screen.infusion_codex.on_fall": "When hitting the ground",
  "screen.infusion_codex.on_heal": "When the user is Healed",
  "screen.infusion_codex.visual": "Visual Changes",
  "screen.infusion_codex.other_effects": "Other Effects",
  "screen.infusion_codex.infusion_function": "Infusion Function",
  "screen.infusion_codex.dormant_properties": "Obtainable From",
  "screen.infusion_codex.innate_properties": "Used By",
  "screen.infusion_codex.related_properties": "Related Infusions",
  "screen.infusion_codex.slotless": "This Infusion is Slotless and will not consume Infusion Slots",
  "screen.infusion_codex.unobtainable": "This Infusion cannot be applied to items in Survival Mode",
  "screen.infusion_codex.disabled": "This Infusion is disabled and will not provide any effects. It can still be obtained and used in recipes and interactions.",

  "narrator.infusion_codex.search_bar": "Search for infusions",
  "narrator.infusion_codex.locked_entry": "This entry is locked",

  "alchemancy.journal.landing_text": "$(o)This book will be your guide to the limitless world of $(thing)Alchemancy$()$(o): a magic mod focused around granting the functionality and properties of any item to any other item with the power of Alchemy and Artifice.",

  "alchemancy.category.basics": "Fundamentals",
  "alchemancy.category.properties": "Infusion Properties",
  "alchemancy.category.trinkets": "Gadgets and Trinkets",
  "alchemancy.category.hints": "Research Hints",
  "alchemancy.category.hints.description": "A collection of incomplete research observations and thoughts. If you don't know what to do next, this would be the best place to look.",

  "alchemancy.entry.infusion_removal": "Infusion Removal",

  "alchemancy.entry.blazebloom": "Mysterious Flora",
  "alchemancy.entry.blazebloom.page0": "During one of my expeditions through The Nether, I came across this peculiar flower growing near a pool of lava. It's warm and oily, capable of emitting a faint glow when planted on Netherrack or a Flower Pot, quite distinct from anything I've seen growing in the Overworld. Due to its warm nature, I believe a suitable name would be $(item)Blazebloom$().",
  "alchemancy.entry.blazebloom.page1": "Like a warm day at the beach.",
  "alchemancy.entry.blazebloom.page2": "So far its oils have served me well as a great source of ink for writing this book. However, I believe that there may be more to this mystical plant. Perhaps I could gather some form of extract by boiling and distilling it in a $(item)Brewing Stand$().",
  "alchemancy.entry.blazebloom.page3": "I wonder what it tastes like..?",

  "alchemancy.entry.alchemancy_forge": "Alchemical Breakthrough",
  "alchemancy.entry.alchemancy_forge.page0": "My experimentation with $(item)Blazeblooms$() has lead me to the discovery of a strange new substance, it's as vibrant as it is corrosive and most certainly NOT safe to ingest. The heat it emits has increased exponentially, and no longer requires any form of soil to generate, my guess would be that this is due to its exposure to Blaze Powder.",
  "alchemancy.entry.alchemancy_forge.page1": "After some more experimentation, I had accidentally spilled some of the extract onto an $(item)Ender Pearl$() I had on my desk, causing it to shoot out an intense beam of energy that mutated a wall of Stone it collided with! A nearby stash of $(item)Emeralds$() also seemed to have reacted to the beam, vibrating as if they were atracted to it.",
  "alchemancy.entry.alchemancy_forge.page2": "Could this be some new form of crafting? Or perhaps an undiscovered facet of Alchemy? All I know is that I might have some ideas to put it to good use.",
  "alchemancy.entry.alchemancy_forge.page3": "By utilizing some vials of Extract and an Ender Pearl as a lens, I have managed to create a device capable of firing beams of Alchemical energy on command... sort of. In order to stabilize the device's structure, I had to fit the vials of Extract underneath my lens. And thanks to the unrelenting power of gravity, I am unable to safely pour Extract onto the Ender Pearl.",
  "alchemancy.entry.alchemancy_forge.page4": "I am most certainly not concerned about this setback, as I have discovered that large quantities of specific gemstones appear to pull in and react to the Alchemical Extract, so a $(item)Block of Emerald$() above my device with a gap in between should be more than enough to run some tests. All that's left to do would be to give the device a click to get it started.",
  "alchemancy.entry.alchemancy_forge.page5": "It may not be portable, or weaponizeable, but it should get the job done.",

  "alchemancy.entry.transmutation": "Item Transmutation",
  "alchemancy.entry.transmutation.page0": "After activating the $(item)Alchemancy Forge$(), all of the extract stored inside of it was consumed and transfered to the Block of Emerald, converting it into an astonishing new crystal! This crystal seems to radiate intense energy, the same created by pouring Alchemical Extract onto an Ender Pearl. And it appears to generate it as well, so I shouldn't need to worry about refueling it.",
  "alchemancy.entry.transmutation.page1": "Activating the crystal with a right-click or a redstone signal shoots out beams of Alchemical energy down to the forge, so placing an item on top of it should allow me to safely convert it into something else. I have dubbed this process $(thing)Transmutation$().$(br)$(br)After experimenting with the forge for a bit, I managed to discover a handful of transmutations. The following pages will detail a handful of my discoveries.",
  "alchemancy.entry.transmutation.page2": "Transmuting an $(item)Ender Pearl$() appears to yield results different to simply pouring extract onto it. It appears as if the pearl has lost all of its \"$(property)Ender$()\" properties, leaving nothing but a blank husk behind. Perhaps it could be refilled with some other type of energy...",
  "alchemancy.entry.transmutation.page3": "Bizarrely, transmuting a $(item)Written Book$() creates an exact copy of my notes, what kind of cosmic joke is this? Does this prove the intervention of a higher power?",

  "alchemancy.entry.infusion": "Item Infusion",
  "alchemancy.entry.infusion.page0": "During one of my experiments, I decided to an additional $(item)Alchemancy Forge$() and attempt to transmute it to see what happens. To my surprise, the Alchemical energy seemed to have reacted to the machine's components, imbuing it with a similar, yet unique form of energy that faintly radiates from the lens.",
  "alchemancy.entry.infusion.page1": "This energy appears to make any items sitting on top of it be drawn to an adjacent beam of Alchemical energy, the effect only lasts while the item is in direct contact with the irradiated energy, and goes away the instant the item is removed from this new device.",
  "alchemancy.entry.infusion.page2": "If an item is transmuted while another is being pushed in by the pedestal, it merges the two together, seemingly appending the properties of the pedestal item onto the one being transmuted. I believe Transmutation isn't the right name for this process, perhaps \"$(thing)Infusion$()\" might suit it better.",
  "alchemancy.entry.infusion.page3": "With some tinkering I have managed to adjust the forge to give me more control over the Infusion process. Now it no longer attempts to infuse or consume items that may result in... unfavorable... effects. Aside from that, Infusions will now occur in a clockwise order starting from the front of the forge, and will start with the \"recipe\" that requires the most ingredients.",
  "alchemancy.entry.infusion.page4": "To recap, Infusion Pedestals can be placed next to or at a diagonal of an $(item)Alchemancy Forge$(), placing an item on a pedestal will attempt to infuse it into the center item when the Crystal is activated. One item for each pedestal will be consumed at a time, and the infusion will try to perform as many \"recipes\" as it can until one of each available item has been consumed.",
  "alchemancy.entry.infusion.page5": "An example of an $(item)Alchemancy Forge$() with 6 $(item)Infusion Pedestals$() attached to it",

  "alchemancy.entry.lead": "Lead",
  "alchemancy.entry.lead.page0": "Alchemists of old would strive to convert base metals, such as lead, into precious gold. Nowadays $(item)Gold Ore$() is fairly common to comeby, so perhaps the opposite could be done to convert it into Lead. Transmuting a $(item)Gold Ingot$() seems to yield a result so similar, that it might as well be used and classified as a common $(item)Lead Ingot$().",
  "alchemancy.entry.lead.page1": "Perhaps due to the transmutation of gold's high enchantability, or simply thanks to its radiation-shielding properties, Lead seems to be completely immune to both transmutation and infusion processes.",
  "alchemancy.entry.lead.page2": "Lead Ingots however, can still be infused onto other items, scrubbing off any Infusions they may have. Perfect for salvaging failed experiments.$(br)$(br)Ingots made from this type of lead can also be crafted into tools and equipment, maintaining the metal's immunity to infusions, making them great for warding off unwanted Infusions that could somehow make it into my equipment. ",
  "alchemancy.entry.lead.page3": "Even if this immunity is seen as a drawback, Lead shares similar attributes to iron when it comes to equipment, having identical defense, damage, and mining efficiency. But something they don't share in common is their durability: Lead equipment is 4 times more durable than its more common counterpart, one could even consider it an upgrade if short on diamonds.",

  "alchemancy.entry.dreamsteel": "Dreamsteel",
  "alchemancy.entry.dreamsteel.page0": "My travels through The Nether have lead me to another discovery: an alloy the locals seem to refer to as $(item)Netherite$(). This metal excels at the creation of tools and armor, and has some latent magnetic properties. But as fascinating as this may be, I can't help but involve this discovery with my latest research. As a result, I will attempt to $(thing)Transmute$() one of these Netherite Ingots.",
  "alchemancy.entry.dreamsteel.page1": "The results were astounding: the Transmutation process had turned my Netherite Ingot into something I could once only experience in my dreams. And trust me, I have seen my fair share of strange things. I have decided to name this crystalline new metal $(item)Dreamsteel$().",
  "alchemancy.entry.dreamsteel.page2": "$(item)Dreamsteel Ingots$() don't seem to be workable in any traditional workbench at my disposal, but appear to be highly reactive to the infusion process. Perhaps unlike its hellbound variant, instead of upgrading my tools with these ingots, I could upgrade the ingots with my tools.",
  "alchemancy.entry.dreamsteel.page3": "Tools made out of $(item)Dreamsteel$() are more similar to $(item)Diamond$() than they are to $(item)Netherite$(). However, these tools have a notably higher capacity for $(thing)Infusions$() than any other item, providing 2 additional slots for a total of 6!",
  "alchemancy.entry.dreamsteel.page4": "$(item)Bows$() made out of $(item)Dreamsteel$() behave unlike other tools of the same material. Instead of a higher $(thing)Infusion$() capacity, the $(item)Dreamsteel Bow$() applies its $(thing)Infusions$() to $(item)Arrows$() shot from it, an excellent alternative to Infusing each Arrow manually.",
  "alchemancy.entry.dreamsteel.page5": "Infusing dyes onto objects and equipment made out of $(item)Dreamsteel$() don't seem to alter their color in the same way other items do. Instead, only the crystalline portions seem to react to the tint. So if I ever want to customize my tools, or for some reason grow tired of the shifting colors, I should be able to tune them to my liking.",
  "alchemancy.entry.dreamsteel.page6": "$(property)Shattering$() a Dreamsteel Ingot seems to be the only way to get nuggets out of it. These nuggets are more malleable than their ingot counterpart, and can be used to repair Dreamsteel Tools at an $(item)Anvil$(). These smaller portions would also allow me to infuse my items with Dreamsteel more efficiently. $(hint)Which reminds me, perhaps I should look into its applications in Infusion...$()",

  "alchemancy.entry.infusion_properties": "Infusion Properties",
  "alchemancy.entry.infusion_properties.page0": "In most cases, $(thing)Infusing$() an item into another item will not convert it into a completely new item. Instead, it will grant it abilities and traits based on the item being applied, sometimes these traits will correlate directly with the item's functionality, while others it will draw out a latent power based on the item's attributes and appearance.",
  "alchemancy.entry.infusion_properties.page1": "I have decided to name these $(thing)Infusion Properties$() or simply $(thing)Properties$() for short.$(br)$(br)As they go against the nature of the item, these $(thing)Properties$() are quite unstable, and will dissipate under a certain set of conditions. $(li)If the item is a block and it's placed down.$(li)If the item changes \"state\", so if a Bucket is filled, or a Potion is drank.",
  "alchemancy.entry.infusion_properties.page2": "Another thing to note about this instability is that most $(thing)Properties$() seem to obey some sort of $(thing)Infusion Limit$(). If any more Properties are present that what the item can handle at the end of the $(thing)Infusion$() process, the most recently applied one will be discarded until the limit is obeyed. $(hint)Some external power might allow me to increase this limit$(), but for now 4 \"slots\" per item are all I have to work with.",
  "alchemancy.entry.infusion_properties.page3": "Properties with contradicting effects tend to interact in some way during the infusion process. Either by cancelling each-other out, having one overpower the other, or creating a brand new one in its place. For instance, an item cannot be both $(property)Burning$() and $(property)Wet$() at the same time, that doesn't make sense. $(hint)Some would call it Paradoxical...$()",

  "alchemancy.entry.name_customization": "Name Customization",
  "alchemancy.entry.name_customization.page0": "Using an $(item)Anvil$() to carve names on my items can feel a bit crude sometimes. If I were to write on a $(item)Name Tag$() instead I would have better calligraphy and better control over what the text looks like. Perhaps I could do so and press the Name Tag onto the item by $(thing)Infusing$() it.",
  "alchemancy.entry.name_customization.page1": "The result was better than I could've hoped. The item's was clear to read and did not appear $(o)italicized$() anymore.$(br)Some $(thing)Infusions$() seem to affect the name's formatting too, I will detail them in the next page.",
  "alchemancy.entry.name_customization.page2": "$(li)$(property)Heavy$() makes the name look $(b)Bold$()$(li)$(property)Slippery$() makes it $(o)italic$() again$(li)$(property)Slashing$() $(m)strikes$() the name out$(li)$(property)Mining$() underlines the name$(li)$(property)Scrambled$() makes the name illegible$(li)$(property)Tinted$() changes its color",
  "alchemancy.entry.name_customization.page3": "$(thing)Infusing$() multiple $(item)Name Tags$() at the same time appends their names and formatting together, achieving name customization no $(item)Anvil$() could ever dream of.",
  "alchemancy.entry.name_customization.page4": "$(thing)Infusing$() a $(item)Written Book$() onto an item will take the book's first page and use it for the item's \"Lore\": purple text that appears under its name when hovered.",

  "alchemancy.entry.pearlescent_ring": "Pearlescent Ring",
  "alchemancy.entry.pearlescent_ring.page0": "$(item)Blank Pearls$() have been quite useful to my studies. Their flexible nature allows them to turn into a variety of other items by infusing specific $(thing)Properties$() into them. $(br)$(br)Another quirk about Blank Pearls is that they don't appear to infuse properly onto other items. instead of carrying their properties over they become attached, or welded, to the item.",
  "alchemancy.entry.pearlescent_ring.page1": "Upon $(thing)Infusion$(), Blank Pearls become incapable of changing form by fully absorbing infusions, but now rather store a form of energy inside of them, the essence of an item's properties in its rawest form.",
  "alchemancy.entry.pearlescent_ring.page2": "By infusing them onto an $(item)Iron Ingot$() I can create a ring that triggers some of the effects of the $(thing)Property$() stored within it as long as its in the user's possesion. Causing effects that occur passively or when dealing damage to take place as if they were held in my dominant hand regardless of where in my inventory the ring lies.",
  "alchemancy.entry.pearlescent_ring.page3": "As good as it may sound, these rings come with an assortment of limitations. Not only do they consume an entire inventory space, but they can only support a single Property Slot without further augments.$(br)$(br)Although I have yet discovered how to release the energy trapped within the pearl onto other items, I should be able to shape it in order to create more rings with unique abilities.",

  "alchemancy.entry.eternal_glow_ring": "Ring of Eternal Glow",
  "alchemancy.entry.eternal_glow_ring.page0": "With the discovery of $(property)Glowing Aura$() the idea of applying it to a $(item)Blank Pearl$() crossed my mind. This created an intriguing new light source: an orb of light which could be walked through, did not require any block to support it, and could be duplicated by feeding it more $(property)Glowing Aura$(). This $(item)Glowing Orb$() quickly grew to be my new favorite light source with how much it resembled the stars in the sky.",
  "alchemancy.entry.eternal_glow_ring.page1": "With how easily it was to reproduce, I quickly started to workshop an upgrade to my $(item)Pearlescent Ring$() that could place them for me. By storing $(property)Glowing Aura$() on my ring and infusing it with a $(item)Glowing Orb$(), as well as the added lever to make it $()Toggleable$() and a source of $(property)Gilded$() to make it look good, I had created a new ring: The $(item)Ring of Eternal Glow$()",
  "alchemancy.entry.eternal_glow_ring.page2": "When in my possesion, this ring will automatically place down a Glowing Orb at my feet if no other artificial light source is around. This ensures that the areas I visit are kept well-lit, keeping away unwanted hostiles, as well as creating a trail that can guide me around the places I've been. $(br)$(br)The added $(item)Lever$() allows me to disable the ring by right-clicking it from my inventory or when held.",
  "alchemancy.entry.eternal_glow_ring.page3": "The ring itself can also be infused onto any item to provide it the $(property)Eternal Glow$() Property, giving it the same effects as the ring but only when the item is being worn or held. This Property also works quite well with projectiles, causing them create a trail of light as they fly through the air.",

  "alchemancy.entry.phasing_ring": "Ring of Phasing",
  "alchemancy.entry.phasing_ring.page0": "The $(property)Phasing$() Property allows the infused item to phase through blocks, but how would I allow myself to get a hold of this ability? My mind wanders to containing the $(thing)Property$() within a $(item)Pearlescent Ring$(), but this alone will not be enough. Some additional $(item)Blank Pearls$() will be required to strengthen the effect. All combined with a $(item)Lever$() to allow me to disable it at will should yield the results I'm looking for.",
  "alchemancy.entry.phasing_ring.page1": "Upon creation, the ring appears to be active, I should be really careful when picking it up.",
  "alchemancy.entry.phasing_ring.page2": "The $(item)Ring of Phasing$() grants me what I was looking for, the ability to phase through blocks the same way items with $(property)Phasing$() do. This also includes blocks below me, meaning that without flight or aerial mobility, misuse of this ring can lead to a swift death to the abyss that lies below bedrock. Which is why the addition of $(property)Toggleable$() was so important, as it allows me to toggle the ring on and off by right-clicking it from my inventory or when held.",
  "alchemancy.entry.phasing_ring.page3": "$(thing)Infusing$() the ring onto an item grants it the $(property)Phase Step$() Property, giving it its abilities as long as the item is held or equipped.",

  "alchemancy.entry.undying_ring": "Ring of Undying",
  "alchemancy.entry.undying_ring.page0": "As great as $(item)Totems of Undying$() are, they can be relatively hard to come by, only for them to have a single use and require you to hold them to activate. As fair as these drawbacks might be for the power of cheating death, I find them incredibly irritating, and should be discardable with some tinkering.",
  "alchemancy.entry.undying_ring.page1": "The $(property)Undying$() Property seems to get close to what I need, but it only affects the item that has it, rather than the holder. Perhaps infusing it onto a Ring might be the way to go.",
  "alchemancy.entry.undying_ring.page2": "The $(thing)Infusion$() was mostly successful. It appears that only infusing a $(item)Totem of Undying$() directly yields the results that I'm looking for, no other source of $(property)Undying$() is capable of doing so.$(br)$(br)That being said, this $(item)Ring of Undying$() works exactly like its Totem variant: it consumes itself in order to save the holder from death, what makes it stand out is that it can do so from anywhere in the user's inventory, the same way every other ring works.",
  "alchemancy.entry.undying_ring.page3": "$(thing)Infusing$() the ring onto makes it work exactly like a Totem would, losing the behavior native to rings, but if the item has durability, it will consume 100 uses before being consumed. $(thing)Infusing$() the ring onto a highly durable item with some added durability-enhancing $(thing)Properties$() should help it last a VERY long while.",

  "alchemancy.entry.friendship_ring": "Ring of Friendship",
  "alchemancy.entry.friendship_ring.page0": "Some of my experiments can be quite harmful, making me worry for the safety of my companions. With the discovery of the $(property)Nonlethal$() Property I believe I should be able to create a Ring that allows them to stay safe from my attacks, whether direct or indirect.",
  "alchemancy.entry.friendship_ring.page1": "As long as this ring is active and stays my inventory, any of my attacks will be incapable of harming animals, villagers, and other players.",

  "alchemancy.entry.wayward_medallion": "Wayward Medallion",
  "alchemancy.entry.wayward_medallion.page0": "The teleportation abilities that $(item)Ender Pearls$() hold are quite the marvel, but when infused onto an item become erratic and unpredictable. With the help of other $(thing)Properties$(), I should be able to stabilize it once more, and perhaps even manipulate it to my benefit.",
  "alchemancy.entry.wayward_medallion.page1": "After some research, I discovered that the $(property)Wayfinding$() properies of $(item)Compasses$() can be used to redirect the destination of where I would be teleported to, and with my $(item)Ring of Friendship$() this destination can also be extended to other players. A $(item)Diamond$() seems like a suitable base for these Infusions, with some work a combination of these materials should yield what I'm dubbing the $(item)Wayward Medallion$().",
  "alchemancy.entry.wayward_medallion.page2": "\"Teleportation is the $(o)Way$() with this $(o)Stone$().\"",
  "alchemancy.entry.wayward_medallion.page3": "The $(item)Wayward Medallion$() can be attuned to a Lodestone or Player the same way any $(property)Wayfinding$() item would, through a simple right-click of the target. Once used, the Medallion will consume some of its charge to teleport me to the target destination, as long as I'm in the same dimension as the destination. It appears to only have 16 uses, but can be recharged with $(item)Ender Pearls$() at an $(item)Anvil$() or by $(thing)Properties$() with repairing abilities.",
  "alchemancy.entry.wayward_medallion.page4": "A curious thing about the $(item)Wayward Medallion$() is that if it's $(thing)Activated$() by another Property, it will immediately teleport any targets its activating on to the attuned destination, consuming charge for each individual teleport. This should make wrangling mobs a lot easier, or even help me make an efficient teleport network.",
  "alchemancy.entry.wayward_medallion.page5": "$(property)Tinting$() the $(item)Wayward Medallion$() will only change the diamond's color and stabilize its pulsating effect, making it an excellent choice for distinguishing and color-coding each one.",

  "alchemancy.entry.property_visor": "Property Visor",
  "alchemancy.entry.property_visor.page0": "Giving items $(property)Revealed$() can help with planning $(thing)Infusions$(), but it can be a somewhat tedious process, one which consumes Infusion Slots and requires a steady supply of $(property)Wise$() at hand. Perhaps with the help of $(item)Dreamsteel$() I should be able to create a device that would let me reveal items without even having to give them a property.",
  "alchemancy.entry.property_visor.page1": "By Infusing a $(item)Revealing Pearl$() and a source of $(property)Wise$() onto a piece of $(item)Dreamsteel$(), I managed to create a lens capable of $(property)Revealing$() the $(thing)Properties$() of any item that's seen through it.",
  "alchemancy.entry.property_visor.page2": "This lens of Revealing could be fashioned into a pair of goggles. But frankly, that sounds quite unoriginal. I opted to turn them into a fancy scouter I like to call the $(item)Property Visor$().",

  "alchemancy.entry.mace_upgrades": "Rocket-Powered Hammer",
  "alchemancy.entry.mace_upgrades.page0": "After spending arduous hours raiding Trial Chambers, I managed to come across a unique new weapon: The $(item)Mace$(). This blunt piece of metal on a stick is greatly affected by gravity, and will deal extra damage the longer I spend falling in the air. With a weapon as rare as this one, it would be a shame to not put it to good use.",
  "alchemancy.entry.mace_upgrades.page1": "After pondering for quite some time, I took notice of my nearby stash of $(item)Fireworks$() and started to think, if the Mace benefits from being in the air, wouldn't it make sense for the Mace $(0)itself$() to be able to propel itself? After some time I managed to come up with some designs, all of which will be detailed in the following pages.",
  "alchemancy.entry.mace_upgrades.page2": "$(o)\"You're insane and I LOVE it!\"",
  "alchemancy.entry.mace_upgrades.page3": "With the help of some $(item)TNT$(), $(property)Burning$() materials, and a large handful of $(item)Fireworks$(), I managed to engineer a thruster onto the Mace strong enough to propel itself and the user forwards with great speed when used. This consumes a lot of the Mace's durability, and without proper repair materials for it, $(thing)Properties$() that restore durability are greatly recommended.",
  "alchemancy.entry.mace_upgrades.page4": "The Hammer's thruster can also be $(thing)Infused$() onto other items to give them $(property)Rocket-Powered$(), allowing them to propel the user forwards like the $(item)Rocket-Powered Hammer$() itself. Doing so takes a great toll on items without durability however, consuming them after a second of use. $(property)Rocked-Powered$() can also be applied to boots to grant them propulsion, by simply jumping I can soar vertically like a rocket, in exchange for some of the boots' durability.",

  "alchemancy.entry.size_manipulation": "Size Manipulation",
  "alchemancy.entry.size_manipulation.page0": "The $(property)Scoping$() Properties of $(item)Spyglasses$() can be quite handy when trying to see things from afar, but I wonder if there might be a chance I can heighten this effect somehow. After some consideration I thought about $(thing)Infusing$() this Property onto a $(item)Blank Pearl$(), perhaps its refractive nature can allow it to enhance its effects.",
  "alchemancy.entry.size_manipulation.page1": "After the $(thing)Infusion$() I quickly shaped the now magenta Pearl into a lens and slotted it into the body of a $(item)Spyglass$() and to my surprise... nothing happened...",
  "alchemancy.entry.size_manipulation.page2": "The new Spyglass wouldn't even act like one, what a shame! In my attempt to salvage my work somehow, I decided to instead $(thing)Infuse$() the lens into the $(item)Spyglass$(), and in a twist of events, my Spyglass had instead shrunk!",
  "alchemancy.entry.size_manipulation.page3": "It appears that with my experimentation I had instead discovered a brand new $(thing)Infusion Property$(): $(property)Resized$()! This new Property allows me to change the size of items by a 10th of its original dimensions at a time, and unlike other Properties, this one can be reapplied multiple times, up until the item reaches half of its original size. $(property)Resized$() items also vary in weight, exchanging attack speed for damage the smaller the size.",
  "alchemancy.entry.size_manipulation.page4": "$(thing)Transmutating$() the Lens appears to invert its \"polarity\", giving it the ability to grow items instead of shrinking them. Items can be grown up to twice their original size, any bigger and the results could be catastrophic. Luckily, the failsafes in my Forge prevent this from happening.",

  "alchemancy.entry.color_manipulation": "Color Manipulation",
  "alchemancy.entry.color_manipulation.page0": "$(property)Tinting$() items is a great help for color-coding inventions of similar form and also lets them stand out more with some added personality. Doing so can be achieved by $(thing)Infusing$() one or more Dyes at the same time onto an item, combining the color of each and applying them as a $(thing)Slotless Infiusion$() that alters the color of the item.",
  "alchemancy.entry.color_manipulation.page1": "This is great for a handful of items. But upon further use, this method has proven to be somewhat limiting. A more better way to recolor items would be smart looking into...",
  "alchemancy.entry.color_manipulation.page2": "By making use of the light-channeling properties of $(item)Spyglasses$(), I have created a special lens that apply its color to other items without it being consumed, allowing me to keep and reutilize more complex color combinations.",
  "alchemancy.entry.color_manipulation.page3": "These $(item)Chroma Lenses$() are more than just reusable dyes for my creations. When $(thing)Infusing$() multiple onto an item at a time, each seem to make an equal imprint on the item, causing it to slowly cylce through each color instead of blending them together.",
  "alchemancy.entry.color_manipulation.page4": "Although not for anything outside of cosmetic purposes, the potential these lenses seem to have is quite substantial, they seem to even be able to change the color of any $(item)Alchemancy Catalyst$() if used on it. $(hint)With the right tools they could even be strong enough to tint living beings...$()",
  "alchemancy.entry.color_manipulation.page5": "$(item)Chroma Lenses$() are great and all, but I believe we can take them a step further...",
  "alchemancy.entry.color_manipulation.page6": "By utilizing these newly-discovered lenses alongside a strong enough light source, I was able to create a device capable of tinting an item with any color of the spectrum. This Chroma-shifting Machine ($(item)Chromachine$() for short) has a set of lenses and lights that can be adjusted to recolor any item used on it, as long as the item is $(thing)Infusable$() and not $(property)Disguised$().",

  "alchemancy.entry.phantom_membrane_block": "Phantom Membrane Block",
  "alchemancy.entry.phantom_membrane_block.page0": "The number of long, sleepless nights over the past few days of research have drawn the attention of $(item)Phantoms$(): airborne creatures of the night that prey on the insomniacs of the world. Thinking that my lack of sleep would make me an easy target are these monsters' last mistake. Rested or not, they're no match for my lightning-powered blade!",
  "alchemancy.entry.phantom_membrane_block.page1": "Their $(item)Membranes$() can be useful for brewing specific potions and as a $(property)Lightweight$() fabric for repairing specific equipment. With how frequent these attacks have been, my supply has grown more than what is reasonably needed. Although not directly related to my research, I could probably come up with an additional use for them.",
  "alchemancy.entry.phantom_membrane_block.page2": "By fashioning 5 pieces of $(item)Membrane$() together and filling them up with air, I have created a block similar to a balloon, but sturdy enough to allow me to stand on it with great care.",
  "alchemancy.entry.phantom_membrane_block.page3": "This new block can travel a few meters upwards before slowing down to a halt, where it will pop after a few seconds. Its sturdy nature makes it possible to place blocks on its side if done so carefully, making it a great substitute for so called \"Nerd Poles\" and $(item)Scaffolding$().",

  "alchemancy.entry.sparkling_band": "Band of Sparkling",
  "alchemancy.entry.sparkling_band.page0": "After putting so much thought into groundbreaking inventions, it's sometimes fun to dial it back a little and try to come up with something a bit more cosmetic. I've lately noticed how many particles are present in nature, and how they can be for the environment. It might make for a fun intermission to try to harness them for myself.",
  "alchemancy.entry.sparkling_band.page1": "Although made from a ring, I had made sure to reshape this accessory to fit as a wristband. The $(item)Band of Sparkling$() emits glimmering particles around the wearer. There's not much else to it, it just looks nice.",
  "alchemancy.entry.sparkling_band.page2": "Suppressing the original nature of the $(item)Pearlescent Ring$() has made the band selective on what $(thing)Infusions$() it can retain, storing them in the star-shaped gemstone on its side. The abilities granted by each Infusion are completely absent, and instead are reflected on the particles emitted by the Band, each being the source of a unique effect. Such as $(property)Burning$() producing faint flames, while $(property)Frosted$() creates snowflakes.",
  "alchemancy.entry.sparkling_band.page3": "$(thing)Infusing$() the $(item)Band of Sparkling$() onto an item gives it the $(property)Sparkling$() property, causing it to glimmer whenever held or worn with the same effects of the provided Band. Some $(thing)Properties$() seem to prevent this behavior, and instead redirect the passive glimmering onto their own visuals. A notable example of this would be how a $(item)Rocket-Powered Hammer$()'s flames are completely replaced with the $(property)Sparkling$() property's effects.",

  "alchemancy.entry.tinted_glasses": "Tinted Glasses",
  "alchemancy.entry.tinted_glasses.page0": "Sunglasses are cool, aren't they? At the very least I certainly think so. I should be able to make a pair with a $(item)Helmet$(), some $(item)Tinted Glass$() and a $(item)Chroma Lens$(). I don't believe I'll make much use out of them, I'm just entertaining the idea of having them.",
  "alchemancy.entry.tinted_glasses.page1": "As expected, they make it much harder to see, but I can also change their lens color to something more or less comfortable by $(property)Tinting$() them. At the very least $(item)Endermen$() seem to like them. They no longer attack me when I look at them in the eye when worn.",

  "alchemancy.entry.leaden_sponge": "Leaden Sponge",
  "alchemancy.entry.leaden_sponge.page0": "All of these failed experiments are going to run my supply of $(item)Gold$() and $(item)Lead$() dry. Perhaps some sort of reusable $(item)Sponge$() to scrub off $(thing)Infusions$() would be a good investment.",
  "alchemancy.entry.leaden_sponge.page1": "My newly-made $(item)Leaden Sponge$() and its corresponding $(property)Infusion Cleanse$() property should allow me to get rid of $(thing)Infusions$() by using my cursor to pick it up from my $(thing)Inventory$() and $(thing)Right-Clicking$() over an other item with it, similarly to putting items inside of a $(item)Bundle$(). Something interesting I've noticed is that even though it's made out of $(item)Lead$(), this Sponge can hold $(thing)Infusions$() like any other item. $(hint)I should use this to my advantage and upgrade it somehow.$()",

  "alchemancy.entry.divine_sponge": "Divine Sponge",
  "alchemancy.entry.divine_sponge.page0": "$(property)Infected$() items can be quite a headache to deal with. They slowly spread their ailment to other items, metaphorically \"killing\" them and disabling their functionality after a while. The only solutions I've found do deal with this plague is to cleanse it with $(property)Sanitized$(), wait for the item to die and revive it with $(property)Undying$(), or using $(item)Lead$() to remove its $(thing)Infusions$() entirely.",
  "alchemancy.entry.divine_sponge.page1": "All of these solutions are either incredibly inconvenient, or somewhat hard to come by. A good solution would be to combine them all together into a reusable invention that I can keep on me when necessary.",
  "alchemancy.entry.divine_sponge.page2": "The $(item)Divine Sponge$() is made with the cleanest, undead-resistant materials I could find, all $(thing)Infused$() into a $(item)Leaden Sponge$() for ease of use. If I want to clear off any malicious $(thing)Properties$() or unwanted filth I can do so the same way I would use a $(item)Leaden Sponge$(), by using my cursor to pick it up from my $(thing)Inventory$() and $(thing)Right-Clicking$() over an other item with it.",

  "alchemancy.entry.flat_hopper": "Flat Hopper",
  "alchemancy.entry.flat_hopper.page0": "$(item)Hoppers$() are quite handy pieces of machinery, but I sometimes wish they were able to pick up items from other than above. Even if they were slightly flatter I could use them for more than what they currently allow...$(br)$(br)Wait a minute, what am I saying? I can simply $(thing)Infuse$() a $(item)Painting$() onto them and make them behave like I need to!",
  "alchemancy.entry.flat_hopper.page1": "$(item)Flat Hoppers$() may not have enough space in them to hold items of their own, but they can swiftly transfer items dropped in front of them to any inventory they're attached to.",
  "alchemancy.entry.flat_hopper.page2": "Their more $(property)Compact$() size allows me to place them on the face of any block, allowing them to pick up items from any direction, even going as far as putting freshly-infused items back into the $(item)Alchemancy Forge$() when placed above one if need be.",

  "alchemancy.entry.binding_key": "Key of Binding",
  "alchemancy.entry.binding_key.page0": "At times when my $(thing)Inventory$() is particularly full, I can be caught dumping the entirety of it into a nearby chest. Although this isn't exactly great for organization, it is also the #1 cause of my misplacement of tools. If I could only bind said tools to my inventory so this won't happen again... I'll work on something right away!",
  "alchemancy.entry.binding_key.page1": "The $(item)Key of Binding$() and its corresponding $(property)Binding$() property can lock and unlock items into place by using my cursor to pick it up from my $(thing)Inventory$() and $(thing)Right-Clicking$() over an other item with it, similarly to putting items inside of a $(item)Bundle$().",

  "alchemancy.entry.spinner_spanner": "Spinner Spanner",
  "alchemancy.entry.spinner_spanner.page0": "I have always being a firm believer of always keeping at hand a tool for the right task, so although there might be other ways to create a handheld item that can rotate blocks, I thought it'd be a fun challenge to make one utilizing all that I have learned so far.",
  "alchemancy.entry.spinner_spanner.page1": "Yes, I understand that yet another wrench isn't the most thrilling thing in the world. But in all fairness, I got this one to work on its own when deployed by a $(item)Dispenser$(), so you could say this helps it stand out somewhat!",

  "alchemancy.entry.attraction_ring": "Ring of Attraction",
  "alchemancy.entry.attraction_ring.page0": "Although I can increase the range of my tools and weapons, I cannot increase the length of my arms, which is still required for picking up items. By studying the behavior of $(item)Allays$(), I should be able to bind a spirit to a ring and train it to act like one. The $(property)Musical$() and $(property)Targeted$() $(thing)Properties$() should be more than enough to help me accomplish this task.",
  "alchemancy.entry.attraction_ring.page1": "$(thing)Infusing$() this ring into an item gives it the $(property)Item Pull$() property, which pulls nearby items towards the user when held. The item itself would also be able to attract items when dropped, $(property)Rooted$(), or thrown as a projectile.",

  "alchemancy.entry.tidewalker_treads": "Tidewalker Treads",
  "alchemancy.entry.tidewalker_treads.page0": "$(item)Boats$() can be quite handy when it comes to traversing large bodies of water. But when your running speed on land is significantly faster than that of a boat's, it becomes hard not to wish to instead sprint over any body of water. By using $(property)Buoyant$() and $(property)Cold$() materials, I should be able to fashion a pair of boots that would let me glide on top of water as it were solid ground.",
  "alchemancy.entry.tidewalker_treads.page1": "When wearing the $(property)Tidewalker Treads$() or any pair of Boots infused with them, I can run over water with relative ease, for as long as I'm not crouching, that is. ",
  "alchemancy.entry.tidewalker_treads.page2": "These boots, unfortunately, do not work on hotter liquids, such as $(item)Lava$(). I'm unsure if figuring out a solution would be a worthwhile endeavor considering I have much more versatile ideas in mind. $(hint)All I need to do is obtain the right materials and I shall conquer the skies just as I have the seas.$()",

  "alchemancy.entry.flame_emperor_gear": "Flame Emperor's Arsenal",
  "alchemancy.entry.flame_emperor_gear.page0": "After discovering the $(property)Burning$() $(thing)Property$(), I've been setting myself on fire relatively often. Whether by eating bread that's slightly too hot, or setting my pants ablaze on accident. I could come up with ways to mitigate this issue, or simply be more careful around fire, but neither sound like appealing ideas. How about I instead figure out a way to turn this ailment into a source of power.",
  "alchemancy.entry.flame_emperor_gear.page1": "With the help of some $(thing)Infusion$() tinkering, I have found a way to let my $(item)Diamond$() gear harness the flames in my body for both offense and utility. I must clarify that none of these items grant immunity to fire damage, so $(item)Potions of Fire Resistance$() and the $(property)Waxed$() $(thing)Property$() are a must.$(2br)I wouldn't call myself one, but I can imagine a $(property)Flame Emperor$() of sorts wearing my equipment into combat.",
  "alchemancy.entry.flame_emperor_gear.page2": "The $(item)Hot Rod$() greatly increases its attack damage and ignites targets while the user is set on fire.",
  "alchemancy.entry.flame_emperor_gear.page3": "The $(item)Molten Core Perforator$() can smelt broken blocks and enhance its mining speed while the user is set on fire.",
  "alchemancy.entry.flame_emperor_gear.page4": "The $(item)Flamewakers$() don't benefit from being ablaze, but do create fire under the wearer's feet when running. Making for great synergy with the other two tools.",

  "alchemancy.entry.home_run_bat": "Home Run Bat",
  "alchemancy.entry.home_run_bat.page0": "My travels have taken me to the depths of the Overworld, to the far reaches of reality itself. So many secrets have been uncovered and even more treasures have been found. But in retrospect, it's surprising how many of these boons influence kinetic energy...$(br)...I wonder what would happen if i mashed them all together. Let's see what's the hardest-hitting stick I can come up with.",
  "alchemancy.entry.home_run_bat.page1": "$(o)\"Batter up!\"",

  "alchemancy.entry.nimbus_belt": "Harnessing The Wind",
  "alchemancy.entry.nimbus_belt.page0": "My ongoing investigation of the $(thing)Trial Chambers$() have lead me to uncover an elusive new mob: $(item)The Breeze$(). These eerie elementals have the ability to command the winds, granting them outstanding offensive capabilities and aerial mobility. Upon defeat, Breezes drop concentrated bars of wind known as $(item)Breeze Rods$(). Who could've thought that wind could be compacted into a solid state?",
  "alchemancy.entry.nimbus_belt.page1": "With these rods and their $(property)Wind Charged$() $(thing)Property$(), I have made a belt that can replicate a $(item)Breeze$()'s abilities. Enhancing my sprint by lunging me forwards at the start of one. The belt cannot be overused, and requires me to touch the ground before recharging.",
  "alchemancy.entry.nimbus_belt.page2": "Another application of this \"compact wind\" is to $(thing)Infuse$() it onto a basin. Creating a container capable of spewing an endless stream of wind that pushes away any $(item)Entity$() in front of it.",

  "alchemancy.entry.hardlight": "Hardlight Steps",
  "alchemancy.entry.hardlight.page0": "Time and time again I have dreamt about the concept of Hardlight: condensing light to a point of becoming solid. In paper, it sounds like something that would go against the laws of physics, but I've encountered far stranger in my studies. The thought of projectable force fields That I can stand on and use to protect myself is too cool to pass up.",
  "alchemancy.entry.hardlight.page1": "Perhaps the strange physics of $(property)The Void$() can help me with my endeavor.$(2br)Using some Light-bending and Gravity Manipulation $(thing)Properties$(), I can $(property)Lock$() light into place to the point of it becoming solid, great success!",
  "alchemancy.entry.hardlight.page2": "The $(item)Hardlight Steps$() are a direct upgrade to my $(item)Tidewalker Treads$(), projecting a field of hardlight under my feet that I can safely stand on when walking off of a ledge.",

  "alchemancy.entry.thunder_lightning_belts": "Nimbus Belt Upgrades",
  "alchemancy.entry.thunder_lightning_belts.page0": "My time in $(thing)The End$() has allowed me to study more closely the abilities and behavior of the $(item)Endermen$(). The way they so effortlessly teleport around is quite a marvel to think about, one can only help but wonder how their method of traversal truly works.",
  "alchemancy.entry.thunder_lightning_belts.page1": "Even though I don't fully understand it, I can confidently put these abilities into practice with $(item)Ender Pearls$() and the $(thing)Infusions$() they provide. With the help of some other resources found in $(thing)The End$(), I could probably make some augments to my old $(item)Nimbus Belt$() to help it catch up to my newest discoveries here.",
  "alchemancy.entry.thunder_lightning_belts.page2": "This belt acts as a direct upgrade to the $(item)Nimbus Belt$() enhancing the strength of its dash and granting me an additional one before touching the ground, for a total of 2 consecutive airborne dashes.",
  "alchemancy.entry.thunder_lightning_belts.page3": "This belt deviates somewhat from the other two. Instead of lunging me forward, it teleports me a few meters in a straight line. It consumes twice as much durability than the other belts, but can \"blink\" up to 3 times before needing to touch the ground.",

  "alchemancy.entry.vaultpick": "Vault-Pick",
  "alchemancy.entry.vaultpick.page0": "$(thing)Trial Chambers$() can be quite challenging at times. Some of that challenge comes from finding them in the first place, which is something you have to do often considering $(item)Vaults$() have a strict policy of one serving per customer. I don't resort to breaking the rules often, but when there's no one around to enforce them, is there any harm in trying to?",
  "alchemancy.entry.vaultpick.page1": "After some investigation, I have concluded that the $(item)Vault$()'s locking mechanism works off of redstone components and electrical currents inside of the lock. By utilizing some $(property)Magnets$() I could hijack the system to make it \"forget\" that I ever opened the vault in the first place. The vault could brick itself if even a single component is tripped out of order, so $(property)Dexterity$() is going to be needed in this procedure.",
  "alchemancy.entry.vaultpick.page2": "The $(item)Vault-Pick$() is my latest invention. It can reset the memory of $(item)Vaults$() by inserting it into their keyhole, allowing me to spend an additional key to obtain more loot from it. The pick is not very $(property)Sturdy$(), so $(thing)Infusions$() are recommended to improve its longevity.",

  "alchemancy.entry.speed_gear": "Artifacts of Speed",
  "alchemancy.entry.speed_gear.page0": "I like going fast, I really do. Feeling the wind in your hair and seeing how any distance can be crossed in terms of seconds, it's such an exhilarating feeling. The $(property)Swift$() $(thing)Property$() makes achieving such speeds a breeze, enhancing my movement speed when applied to leggings and my attack speed when applied to my weapons.",
  "alchemancy.entry.speed_gear.page1": "This great speed can be more than sufficient for my needs, but I wonder how far I could push its limits. What if I were to make a set of equipment that can benefit from the $(property)Swift$() $(thing)Property$() and take its abilities much further? Imagine becoming faster than sound itself, or being able to react before your enemies notice it.",
  "alchemancy.entry.speed_gear.page2": "The $(item)Mechanical Boots$() greatly enhance my movement speed and jump height while running. They even repair themselves while I'm moving. Truly marvelous footwear for long-distance travel.",
  "alchemancy.entry.speed_gear.page3": "As light as a leaf, yet as sharp as a sword, the $(item)Feral Blade$() has unparalleled attack speed. It even has the ability to improve my reaction times when held in my offhand.",

  "alchemancy.entry.infusion_flask": "Infusion Flask",
  "alchemancy.entry.infusion_flask.page0": "As I've mentioned in previous entries, $(item)Blank Pearls$() have the capability of containing raw $(thing)Infusion Properties$() inside of them, but I have no way of safely releasing it onto other items. But with the discovery of $(item)Dreamsteel$() and the $(property)Awakened$() property, I am starting to come up with ideas on how to solve this roadblock.",
  "alchemancy.entry.infusion_flask.page1": "Perhaps by storing $(thing)Infusions$() in the same container as some Alchemical Energy, I could then scatter its effects like a $(item)Splash Potion$(). ",
  "alchemancy.entry.infusion_flask.page2": "It might not be the most elegant solution, but the $(item)Infusion Flask$() can be quite versatile at isolating $(thing)Infusion Properties$() and applying them in bulk at a significantly reduced cost. The energy released by the flask is capable of affecting both items dropped in the ground as well as items and armor equipped by Players and Entities. This can be useful for dealing with armored monsters, but care must be had, as any effects that affect them could also affect me.",
  "alchemancy.entry.infusion_flask.page3": "The $(item)Infusion Flask$() isn't an unlimited source of $(thing)Infusions$() however, as a single flask can only affect up to 32 items at a time and can only store 2 $(thing)Infusion Properties$(). The flask's energy cannot be released onto other flasks either.",

  "alchemancy.entry.quantum_entanglement": "Quantum Entanglement",
  "alchemancy.entry.quantum_entanglement.page0": "It's practically impossible to study $(thing)The Void$() directly, as getting too close to it can result in utter annihilation. This is where $(item)Void Pearls$() come in, the imprint the abyss made on them has been of great help for my studies.",
  "alchemancy.entry.quantum_entanglement.page1": "It appears that the physics of The Void can be quite... \"loose\". Matter inside it is much more easily manipulated, even letting objects occupy the same space at times. The latter would be great for inventory management, perhaps I can isolate this ability into an infusable \"capsule\" of sorts.",
  "alchemancy.entry.quantum_entanglement.page2": "With a bit of work I figured out how to make the $(item)Entangled Singularity$() a... set? of Pearls that can permanently bind two items together, switching between the two whenever the $(thing)Property$() is $(thing)Activated$().",
  "alchemancy.entry.quantum_entanglement.page3": "$(property)Entangled$() items do not share durability, but if one of them is destroyed the other will also be lost forever.$(2br)Item Entanglement has been a wonderful discovery, but my methods of shifting between the two items can be quite limiting. A tool that could easily do so would be a good solution.",
  "alchemancy.entry.quantum_entanglement.page4": "The $(item)Quantum Spanner$() and $(property)Quantum Shift$() $(thing)Property$() can manually shift between the two $(property)Entangled$() items by using my cursor to pick it up from my $(thing)Inventory$() and $(thing)Right-Clicking$() over an other item with it, similarly to putting items inside of a $(item)Bundle$().",
  "alchemancy.entry.quantum_entanglement.page5": "Perhaps a more automatic way of shifting between $(property)Entangled$() Items would be a good idea. If I were to $(thing)Infuse$() specific $(thing)Properties$() at the same time as the $(item)Entangled Singularity$() I could bind its shifting behavior to the actions of the wearer.",

  "alchemancy.entry.black_hole_tools": "Black Hole Tools",
  "alchemancy.entry.black_hole_tools.page0": "$(item)Pocket Black Holes$() may have unlimited offensive capabilities. But in a world where Mining and Crafting is paramount, they may not prove to be too useful for creative endeavors. As they cleanly erase their targets, not leaving a trace of salvageable resources behind...",
  "alchemancy.entry.black_hole_tools.page1": "After all, a Black Hole is still a Black Hole. It does nothing more than endlessly consume and obliterate matter. But if i were to stabilize it somehow in a way that could still absorb matter without completely destroying it, and binding its abilities to a tool, I could create a set of equipment that can absorb related blocks in an area around the user. Picking them up as if they were mined with $(thing)Silk Touch$(), yet not obliterating the block in its entirety.",

  "alchemancy.entry.pocket_black_hole": "Pocket Black Hole",
  "alchemancy.entry.pocket_black_hole.page0": "The void has one unique characteristic: the ability to obliterate anything that comes into contact with it, the only way to escape it is to outrun it or be $(property)Voidborn$(). Imagine if you could harness that power for yourself. Long gone would be the days of having to deal with pesky Pillagers and unwanted undeads.",
  "alchemancy.entry.pocket_black_hole.page1": "By imbuing a $(item)Void Pearl$() with $(property)Arcane$() magic, I can create a singularity with that of properties similar to the abyss that it came from. Making for a devastating projectile capable of obliterating almost any living being in one hit, leaving nothing of it behind.",

  "alchemancy.entry.telekinetic_glove": "Telekinetic Glove",
  "alchemancy.entry.telekinetic_glove.page0": "Wrangling Animals can be quite tedious at times. Things would be much easier if I could grab them with my bare hands and put them where they need to go instead.$(2br)Maybe not with my bare hands, but utilizing the physics of $(thing)The Void$() I could make a gauntlet capable of moving things remotely.",
  "alchemancy.entry.telekinetic_glove.page1": "The $(item)Telekinetic Glove$() and $(property)Kinetic Grab$() $(thing)Property$() can hold any Entity in place by simply clicking on them, I can even fling them around if released with enough force.",

  "alchemancy.entry.trial_chamber_hint": "Tricky Trials",
  "alchemancy.entry.trial_chamber_hint.page0": "I've heard rumors from the Villagers of ancient, underground rooms they call the $(thing)Trial Chambers$(). Legend has it that these rare chambers hold unprecedented challenges unlike anything in The Overworld, but contain equally-unique loot and riches for those that dare brave it and come out alive.",
  "alchemancy.entry.trial_chamber_hint.page1": "Perhaps I should look into them some more, these \"Challenges\" and \"Riches\" could be of use for my research...",

  "alchemancy.entry.voidborn_hint": "Staring at the Abyss...",
  "alchemancy.entry.voidborn_hint.page0": "The End is quite the mysterious place, its emptiness and scattered islands make it quite eerie, yet... strangely relaxing... I sometimes find myself enjoying the calm of sitting at the edge of an island, pondering into the great empty space that lurks below me.",
  "alchemancy.entry.voidborn_hint.page1": "During one of my pondering sessions, $(property)Depth Dweller$(), one of my newly-discovered Properties, came into my head. If its abilities are amplified the closer you get to the bottom of the world, what would happen to it if it manages to the void and survive?",
  "alchemancy.entry.voidborn_hint.page2": "Of course, items cannot normally survive coming into contact with the void, $(o)nothing$() can. But perhaps... $(hint)if I were to make the item $(property)Undying$() as well$() the experiment might yield different results.$(br)$(br)The thought of tampering with the Abyss feels terrifying, yet quite exhilarating.",

  "alchemancy.entry.infusion_codex": "Infusion Codex",
  "alchemancy.entry.infusion_codex.page0": "Cataloguing every single $(thing)Infusion Property$() into this journal has proven to be an impossible task from the sheer amount that exist. So instead of cramming everything into this book, I have decided to pursuit a more convenient way to keep record of my findings.",
  "alchemancy.entry.infusion_codex.page1": "$(thing)Transmuting$() a $(item)Book$() seems to increase its size and facilitates adding more pages when needed, these factors paired with a system of bookmarks I have devised make my newly-created $(item)Infusion Codex$() a breeze to navigate.",
  "alchemancy.entry.infusion_codex.page2": "The increased page size allows me to keep track of what items I have found to be the source of what $(thing)Properties$(). And with it being a book separate from my journal, it allows me to experiment with the format of the entries. Choosing to go into as much detail as I possibly can and avoiding personal opinions when possible, except for a small quip at the top of each entry, I couldn't resist myself.",
  "alchemancy.entry.infusion_codex.page3": "The $(thing)Transmutation$() process has also populated the Codex with additional entries of $(thing)Properties$() I haven't encountered yet. They do share my writing patterns and handwriting, so it's all quite bizarre. My working hypothesis is hard to describe, but it can be interpreted as $(hint)if the Codex's entries got carried over to other save files, like in a video game.$()",

  "alchemancy.entry.property_activation": "Property Activation",
  "alchemancy.entry.property_activation.page0": "Some $(property)Infusion Properties$() are capable of interacting with others by having them trigger specific effects. A notable example can be $(property)Interactable$(), the property most commonly associated with $(item)Buttons$(). It can trigger said effects by simply using the item. I have decided to call the action of triggering these effects \"$(thing)Activation$()\" and will be referred to as such in the $(item)Infusion Codex$().",
  "alchemancy.entry.property_activation.page1": "The effects of an $(thing)Activation$() seem to most commonly correspond to that of the $(thing)Property$()'s offensive capabilities. More specifically, it replicates the behavior of attacking and landing a critical hit on what could be considered the $(thing)Activation Target$(). So for instance, if you were to pick up a $(property)Ticking Exploding$() item, it will act like a time bomb and explode after a few seconds.",
  "alchemancy.entry.property_activation.page2": "There seem to be some effects exclusive to $(thing)Activation$() and have been given an appropriate section in the $(item)Infusion Codex$().$(br)$(br)Something else worth noting is that when any Food or Drink with $(thing)Properties$() is eaten, all of its effects will be $(thing)Activated$(), regardless of if it's been infused with $(property)Edible$() or not.",

  "alchemancy.entry.infusion_property.missing": "$(o)This entry appears to be missing, please inform the mod author.",
  "alchemancy.entry.infusion_property.wiki": "$(o)In the meantime, you can refer to the wiki for information on this property.",
  "alchemancy.entry.infusion_property.wiki_button": "Alchemancy Wiki",

  "alchemancy.entry.infusion_property.glowing_aura.page0": "Some items and blocks have the unique ability to emit light when placed down, $(thing)Infusing$() one of them into an item grants it $(property)Glowing Aura$().$(br)The universe does not make it easy to create a portable light source. So instead of emitting light, this $(thing)Property$() makes the item emit a faint glow, allowing it to be seen in the dark even when worn.",
  "alchemancy.entry.infusion_property.glowing_aura.page1": "Another strange quirk about $(property)Glowing Aura$() is that it makes the holder glow with a spectral aura, allowing them to be seen from behind blocks and other entities. This effect can be briefly transferred to other entities by hitting them with an item with this property, or by $(thing)Activating$() it on them.",

  "alchemancy.entry.infusion_property.blinding.page0": "Squid Ink can be a useful substance for writing and drawing, but as seen from squids when aggravated, its viscous properties allow it to briefly blind aggressors.",
  "alchemancy.entry.infusion_property.blinding.page1": "Using it as an $(thing)Infusion$() material should allow me to coat any weapon with it, applying a blinding effect onto targets with my attacks. Granting $(property)Blinding$() to a helmet causes the wearer to be afflicted with said blindness, should come in handy if I ever need a blindfold.",
  "alchemancy.entry.infusion_property.blinding.page2": "The ability to impair a target's vision can be utilized well in combat. But I believe this property can be used for more, $(hint)perhaps an item that could grant knowledge or wisdom could bring out this $(thing)Property$(hint)'s potential...$()",

  "alchemancy.entry.infusion_property.awkward.page0": "$(item)Nether Wart$() can make for a really good potion base, bringing out the qualities hidden within certain ingredients to create brews with magical effects.",
  "alchemancy.entry.infusion_property.awkward.page1": "Although I'm unable to directly $(item)Infuse$() these effects onto my items using Potions, the $(thing)Properties$() given by Nether Wart seem to react with the same ingredients during the $(thing)Infusion$() process to yield similar results. Most of the following $(thing)Properties$() seem to correspond to their respective Potion in terms of effects, with each of their recipes detailed.",

  "alchemancy.entry.infusion_property.warped.page0": "The Nether is populated by an assortment of twisted biomes, and the Warped Forest is no stranger to that. It is covered in strange, cyan fungi with similarly colored weeds to match. The only superficial trait these fungi seem to have is a pungent smell repulsive to Hoglins, but I have a feeling that there's more beneath the surface.",
  "alchemancy.entry.infusion_property.warped.page1": "When any organic material native to the Warped Forest is used in infusion, it will pass onto the item fainter version of this smell. Curiously however, if the item being given $(property)Warped$() has other Infusions, the Property will consume itself and \"corrupt\", or for a more fitting term, \"$(thing)Warp$()\" all other $(thing)Infusion Properties$() the item might have, turning Hot into Cold, $(property)Sharp$() into $(property)Nonlethal$(), $(property)Heavy$() into $(property)Lightweight$(), and so on.",
  "alchemancy.entry.infusion_property.warped.page2": "This Property alone is incredibly fundamental to my pursuit of knowledge, as a variety of interactions can lead into completely undiscovered results. A majority of $(thing)Warps$() are also complete opposites to the $(thing)Properties$() they're sourced from, cancelling out if both are present, which gives me control over what $(thing)Properties$() can be removed from an item.$(br)The following pages will detail some discoveries made by $(thing)Warping Properties.$()",

  "alchemancy.entry.infusion_property.scrambled.page0": "By combining $(property)Blinding$() and $(property)Wise$() I have managed to create a way to conceal the nature of my items. The combination of these two will obfuscate any item's information by jumbling it into incomprehensible glyphs, making it much harder to decipher the contents of potions, or even what enchantments or $(thing)Infusions$() an item might have.",
  "alchemancy.entry.infusion_property.scrambled.page1": "By $(property)Warping$() this $(thing)Property$(), I should be able to $(property)Reveal$() the true nature of any item, letting me know exactly what $(thing)Properties$() they're composed of without the necessity of using them in $(thing)Infusion$() and having to remember each one.",

  "alchemancy.entry.infusion_property.wise.page0": "It is normally taken as fact that there is certain wisdom in literature, and the existence of this $(thing)Property$() gives empirical evidence to it.",
  "alchemancy.entry.infusion_property.wise.page1": "Items $(thing)Infused$() with $(item)Books$() and other knowledge-holding items allow them to retrieve more experience from broken blocks and monsters slain, any item held or worn will contribute a small amount to this boost, but if the item held has this $(thing)Property$(), the amount of experience points dropped will be doubled.",
  "alchemancy.entry.infusion_property.wise.page2": "I believe that imbuing items with knowledge can do more than increase experience drops, $(hint)perhaps with the right tools I could even use it to $(property)reveal$(hint) what $(thing)Properties$(hint) an item will give before applying it to another...",

  "alchemancy.entry.infusion_property.revealed.page0": "After a lot of trial and error I have finally found a way to reveal the true nature of items, by giving $(property)Revealed$() to any item it will show to me the $(thing)Infusion Properties$() it is composed of.$(br)Despite its usefulness, this property is somewhat tedious to recreate, if only there was a way to make the revealing process simpler.",
  "alchemancy.entry.infusion_property.revealed.page1": "By applying it to a $(item)Blank Pearl$() I have found a way to store the property inside of a tangible item, one which can be stored for later use and applied to another item through the process of $(thing)Infusion$().",
  "alchemancy.entry.infusion_property.revealed.page2": "These $(item)Revealing Pearls$() seem to feed off of knowledge, by $(thing)Infusing$() them with $(property)Wise$() they will create 2 identical copies of the Pearl, making for a much more easily obtainable source of $(property)Revealed$().",

  "alchemancy.entry.infusion_property.soulbind.page0": "I always thought that the name \"$(item)Soul Sand$()\" came from the face-like patterns that can be commonly seen in fistfuls of this soil. But what I firstly dismissed as a simple case of Pareidolia has quickly proven to be something much more. This sand does, in fact, contain trapped souls within it. All of a sudden I start to feel uneasy around $(item)Soul Torches$()...",
  "alchemancy.entry.infusion_property.soulbind.page1": "With the power of $(thing)Infusion$() I can transfer these souls out of the sand into any other item, creating the $(property)Soulbind$() property. The hold my items have on these spirits seem to be much weaker than that of the sand, and will simply escape when they start growing restless. With the right combination of $(thing)Infusions$(), the item could become more hospitable, hopefully convincing them to stay and enhance my inventions.",

  "alchemancy.entry.paradox_pearl": "Paradoxical",
  "alchemancy.entry.paradox_pearl.page0": "Although quite simple at first glance, the strange properties of $(item)Blank Pearls$() have always intrigued me. Both cabable of storing energy and reacting to it tremendously easily, I could never make sense of their true nature.",
  "alchemancy.entry.paradox_pearl.page1": "$(thing)Infusing$() $(item)Dreamsteel$() onto an item allows it to unlock its \"true potential\", bringing what were once $(thing)Dormant Properties$() to light. I know that said properties aren't present on $(item)Blank Pearls$(), but I can't help but wonder what kind of potential could be hiding within them.",
  "alchemancy.entry.paradox_pearl.page2": "Guess the universe didn't like that...",
  "alchemancy.entry.paradox_pearl.page3": "Upon applying $(property)Awakened$() to a pearl, something... incomprehensible... started to happen. The pearl had started wildly changing colors and \"glitching out\", as if it were an error in the universe. A $(property)Paradox$(), if you will. Anything within its immediate vicinity would stop making sense. Gravity would cease to be, fire would stop spreading, and objects would phase through others. As if the rules of existence would stop around it.",
  "alchemancy.entry.paradox_pearl.page4": "Naturally, my first thought was: \"What if I infused it onto an item?\" so I proceeded to do just that.$(br)The $(thing)Infusion$() was successful. nothing seemed out of place at first glance. But upon further inspection, I had noticed that $(thing)Properties$() would stop reacting with one another, exact opposites and highly reactive pairs could coexist with one another.",
  "alchemancy.entry.paradox_pearl.page5": "I flipped through my notes and attempted a handful of recipes, anything that would create or cancel out an $(thing)Infusion$() wouldn't work. So although not great for further discovery, my options for combinations have been greatly expanded. This could aid me in the creation of harder to plot recipes, but for them to work, I'd have to figure out how to collapse the paradox.",
  "alchemancy.entry.paradox_pearl.page6": "$(thing)Infusing$() a second $(item)Paradox Pearl$() onto the item seems to do the trick. After all, two negatives make a positive, correct?",

  "alchemancy.entry.infusion_property.voidborn.page0": "After a moment of sitting idly in $(thing)The End$(), I remembered my research notes on the void and headed back home, where I applied $(property)Undying$() to my boots which already had $(property)Depth Dweller$() on them. Then I went back and flung them into the abyss. Perhaps I should've used something else in case things went wrong. Those were some nice boots after all.",
  "alchemancy.entry.infusion_property.voidborn.page1": "I kept my eyes locked on my pair of boots as they fell, when all of a sudden the sky lit up and a loud crash rumbled across the island. Terrified at first, I waited immobilized in shock. That was when to my surprise my boots floated back up to me! They glimmered with a glow similar to that of an item with $(property)Glowing Aura$(), but quickly went dim as soon as they reached me.",
  "alchemancy.entry.infusion_property.voidborn.page2": "I decided to run the test again, this time using $(item)Blank Pearls$() instead to better study the Infusion Energy emitted. The process created a strange, swirling, pearl. Which radiated with this new $(thing)Property$(), allowing me to apply it in a more controlled environment.",
  "alchemancy.entry.infusion_property.voidborn.page3": "It appears as if items with this new $(thing)Property$() were born anew from the void. Becoming $(property)Voidborn$(), if you will. These items appeared to have gained the skills to thrive in the abyss without being harmed, gracefully floating back up to a safe distance when they reach it. They even seem to be capable of saving sentient life that hold onto them, but not without a cost to the item's integrity.",
  "alchemancy.entry.infusion_property.voidborn.page4": "By $(thing)Infusing$() $(property)Voidborn$() onto a ring, I can create an accessory capable of saving me from the void up to 50 times before needing to refuel, regardless of where it is in my $(thing)Inventory$(). ",
  "alchemancy.entry.infusion_property.voidborn.page5": "The $(item)Ring of the Voidless$() should also provide protection from any destructive forces of similar nature, $(hint)like a Black Hole$() if I were to ever encounter any.$(2br)On top of being capable of navigating the void, these $(property)Voidborn$() items seem to contain some residual \"matter\", or lack there of, from the abyss below. I should research this imprint immediately, $(hint)it should help me create once-impossible gadgets and contraptions.$()",

  "infusion_codex.toast.title": "New Infusions Discovered!",
  "infusion_codex.toast.description": "Check your Infusion Codex",

  "infusion_codex.alchemancy:absorbent.flavor": "shlorp",
  "infusion_codex.alchemancy:absorbent.stacked_over": "Absorbs materials stacked over the item that cam be used to repair it to replenish its durability.",
  "infusion_codex.alchemancy:absorbent.while_equipped": "Immediately picks up any items on the ground, completely bypassing their pickup delay. Automatically absorbs any materials that can be used to repair the item in the user's inventory, replenishing the item's durability in the process. Picks up any liquids the user may be inside of if {property alchemancy:bucketing} is present and empty.",
  "infusion_codex.alchemancy:air_walker.flavor": "Think coyote time but without a time limit",
  "infusion_codex.alchemancy:air_walker.while_worn_boots": "Creates a platform of solid light under the user's feet, preventing them from falling down after walking off of a ledge. Crouching lowers the height of the platform.",
  "infusion_codex.alchemancy:allergic.flavor": "Not fond of pollen season",
  "infusion_codex.alchemancy:allergic.while_equipped": "{activate Activates} the item on the user when receiving a potion effect they don't already have.",
  "infusion_codex.alchemancy:anchored.flavor": "Hold Still",
  "infusion_codex.alchemancy:anchored.when_dropped": "Holds the item in place, making it nearly impossible to move.",
  "infusion_codex.alchemancy:anchored.when_shot": "Holds the projectile in place, making it nearly impossible to move.",
  "infusion_codex.alchemancy:anchored.while_worn": "Holds the user in place, making them nearly impossible to move.",
  "infusion_codex.alchemancy:antigrav.flavor": "Like drifting through space",
  "infusion_codex.alchemancy:antigrav.when_dropped": "Disables the item's {attribute Gravity}, causing it to fly in a straight line.",
  "infusion_codex.alchemancy:antigrav.when_shot": "Disables the Projectile's {attribute Gravity}, causing it to fly in a straight line.",
  "infusion_codex.alchemancy:antigrav.while_worn": "Reduces the user's {attribute Gravity} by 100%",
  "infusion_codex.alchemancy:aquatic.flavor": "Swim with the fishes",
  "infusion_codex.alchemancy:aquatic.when_shot": "Allows Projectiles to fly through {item Water} as they would outside of it.",
  "infusion_codex.alchemancy:aquatic.while_held_mainhand": "Increases {attribute Mining Speed} by 200% while underwater.",
  "infusion_codex.alchemancy:aquatic.while_worn_boots": "Increases {attribute Walking Speed} by 55% while underwater.",
  "infusion_codex.alchemancy:aquatic.while_worn_chestplate": "Increases {attribute Mining Speed} by 200% while underwater.",
  "infusion_codex.alchemancy:aquatic.while_worn_helmet": "Increases {attribute Oxygen Bonus} value by 2, granting a similar effect to {enchantment minecraft:respiration} II.",
  "infusion_codex.alchemancy:aquatic.while_worn_leggings": "Increases {attribute Swim Speed} by 55%.",
  "infusion_codex.alchemancy:arcane.attribute_modifier": "Increases the item's {attribute Enchantability} by 18.",
  "infusion_codex.alchemancy:arcane.flavor": "Join the glorious evolution",
  "infusion_codex.alchemancy:arcane.modify_damage": "Causes the item to deal {arcane Magic} damage, making its attacks bypass {attribute Armor}.",
  "infusion_codex.alchemancy:armor_pulse.flavor": "Bounce them back... Or bounce yourself back instead",
  "infusion_codex.alchemancy:armor_pulse.when_hit_worn_or_using": "Reduces damage taken from blockable attacks within the user's {attribute Entity Interaction Range} by 1 point, {activate Activating} the item on the user in the process.",
  "infusion_codex.alchemancy:assembling.activate": "Attempts to craft more of the item by consuming resources in the user's inventory. Crafted items will not retain any of the source's item's data.",
  "infusion_codex.alchemancy:assembling.flavor": "Autocrafting on the go",
  "infusion_codex.alchemancy:assembling.other_effects": "Makes the item non-stackable.",
  "infusion_codex.alchemancy:assembling.stacked_on": "If right-clicked from the inventory with an empty cursor, the item will attempt to craft more of itself by consuming resources in the user's inventory. Crafted items will not retain any of the source's item's data.",
  "infusion_codex.alchemancy:assembling.while_rooted": "When right-clicked, the item will attempt to craft more of itself by consuming resources in the user's inventory. Crafted items will not retain any of the source's item's data.",
  "infusion_codex.alchemancy:assimilating.flavor": "All for one",
  "infusion_codex.alchemancy:assimilating.stacked_over": "Absorbs similar items stacked over the item to replenish its durability and apply the assimilated item's {system Infusions} and Enchantments when possible.",
  "infusion_codex.alchemancy:assimilating.while_equipped": "Automatically absorbs any other items like it in the user's inventory when low on durability, replenishing the item's durability in the process and absorbing the assimilated item's {system Infusions} and Enchantments when possible. If {property alchemancy:assembling} is present, the item will be able to absorb ingredients used to craft itself inside of the user's inventory as long as they can all create a new item.",
  "infusion_codex.alchemancy:athletic.flavor": "Faster than a speeding bullet. Able to leap tall buildings in a single bound.",
  "infusion_codex.alchemancy:athletic.while_worn_boots": "Increases {attribute Movement Speed} and {attribute Jump Height} by 65% and {attribute Safe Fall Distance} by 3 blocks while sprinting.",
  "infusion_codex.alchemancy:auxiliary.flavor": "One ring to rule them all... or maybe 35...",
  "infusion_codex.alchemancy:auxiliary.other_effects": "Effects triggered by {function while_held_mainhand}, {function on_attack}, and {function on_kill} trigger for this item from anywhere in the user's inventory as if they were holding it in their Main Hand.",
  "infusion_codex.alchemancy:awakened.flavor": "Unlock your True Potential",
  "infusion_codex.alchemancy:awakened.other_effects": "Makes {system Dormant Properties} act as if they were {system Infused} onto the item, triggering all related effects.",
  "infusion_codex.alchemancy:awkward.flavor": "A tad strange",
  "infusion_codex.alchemancy:awkward.other_effects": "Can be used create various new {system Infusions} related to Potion Effects.",
  "infusion_codex.alchemancy:battery_powered.flavor": "Battery companies hate it!",
  "infusion_codex.alchemancy:battery_powered.other_effects": "Allows the item to store up to 10,000 FE if it cannot already store energy.",
  "infusion_codex.alchemancy:battery_powered.while_in_inventory": "Attempts to draw 100 FE from the item's buffer every tick to repair 1 point of durability.",
  "infusion_codex.alchemancy:binding.flavor": "Frost Jailer's signature move",
  "infusion_codex.alchemancy:binding.stacked_over": "Applies or removes {property alchemancy:unmovable} from the target item, preventing it from being dropped or moved into a different slot.",
  "infusion_codex.alchemancy:blast_resistant.flavor": "All of a sudden explosions feel safe",
  "infusion_codex.alchemancy:blast_resistant.receive_damage_worn_or_using": "Reduces damage dealt by explosions by 50%.",
  "infusion_codex.alchemancy:blinding.flavor": "Turning off the lights",
  "infusion_codex.alchemancy:blinding.on_attack": "Applies Blindness to the target for 10 seconds.",
  "infusion_codex.alchemancy:blinding.while_worn_helmet": "Applies Blindness to the user for 10 seconds.",
  "infusion_codex.alchemancy:blinking.activate": "The user phases up to 10 blocks in the direction they're looking, consuming 5 durability points or the item itself.",
  "infusion_codex.alchemancy:blinking.flavor": "Quick on our feet, hard to defeat!",
  "infusion_codex.alchemancy:blinking.while_worn": "Phase up to 10 blocks forward after initiating a sprint, consuming 5 durability points or the item itself.",
  "infusion_codex.alchemancy:bouncy.activate": "Bounces the user away from the target for a short distance.",
  "infusion_codex.alchemancy:bouncy.flavor": "Slime Boots who?",
  "infusion_codex.alchemancy:bouncy.on_attack": "Bounces the target back a short distance.",
  "infusion_codex.alchemancy:bouncy.on_fall": "Bounces the user upwards with reduced force of which they hit the ground, nullifying all fall damage.",
  "infusion_codex.alchemancy:bouncy.when_hit_equipped": "Bounces the user away from the damage source for a short distance.",
  "infusion_codex.alchemancy:bouncy.when_shot": "Bounces off of blocks on impact if the Projectile is going at a high enough speed.",
  "infusion_codex.alchemancy:brittle.attribute_modifier": "Reduces the item's total durability by 35%",
  "infusion_codex.alchemancy:brittle.flavor": "Shatter me like glass",
  "infusion_codex.alchemancy:brittle.when_dropped": "Breaks the item after hitting the ground with enough force, triggering {function on_destroy} effects.",
  "infusion_codex.alchemancy:brittle.when_shot": "Breaks the item on impact, triggering {function on_destroy} effects.",
  "infusion_codex.alchemancy:brushing.flavor": "Archaeologist hate it!",
  "infusion_codex.alchemancy:brushing.when_shot_from_dispenser": "Brushes an Armadillo in front of the {item Dispenser} to obtain {item Armadillo Scute}.",
  "infusion_codex.alchemancy:brushing.when_used_block": "Allows the item to brush off {item Suspicious Blocks}.",
  "infusion_codex.alchemancy:brushing.when_used_entity": "Can brush Armadillos to obtain {item Armadillo Scute}.",
  "infusion_codex.alchemancy:bucketing.flavor": "This... is a bucket",
  "infusion_codex.alchemancy:bucketing.other_effects": "Allows the item to store up to one {item Bucket} of a single liquid. Makes the item non-stackable.",
  "infusion_codex.alchemancy:bucketing.when_shot_from_dispenser": "Dispenses the stored liquid first before dispensing itself.",
  "infusion_codex.alchemancy:bucketing.when_used_block": "Picks up the targeted liquid if the item is empty. If not, then the liquid is instead placed down.",
  "infusion_codex.alchemancy:buoyant.flavor": "Don't forget your floaties",
  "infusion_codex.alchemancy:buoyant.when_dropped": "Floats the item upwards while inside of a liquid.",
  "infusion_codex.alchemancy:buoyant.when_shot": "Floats the Projectile upwards while inside of a liquid.",
  "infusion_codex.alchemancy:buoyant.while_equipped": "Floats the user upwards while inside of a liquid.",
  "infusion_codex.alchemancy:burning.flavor": "Turning up the heat",
  "infusion_codex.alchemancy:burning.on_attack": "Sets the target on fire for 5 seconds. Duration is multiplied by the item's level of {enchantment minecraft:fire_aspect}.",
  "infusion_codex.alchemancy:burning.when_shot": "Sets the shot projectile on fire for 4 seconds.",
  "infusion_codex.alchemancy:burning.while_rooted": "Sets entities standing inside of the item on fire for 4 seconds. Duration is multiplied by the item's level of {enchantment minecraft:fire_aspect}.",
  "infusion_codex.alchemancy:burning.while_worn": "Constantly sets the user on fire every half a second.",
  "infusion_codex.alchemancy:calcareous.activate": "Clears the target's Potion Effects and {property alchemancy:chromatize} tint.",
  "infusion_codex.alchemancy:calcareous.flavor": "[kal-kair-ee-uhs] Adjective: contains calcium",
  "infusion_codex.alchemancy:calcareous.while_worn_leggings": "Reduces the user's {attribute Fall Damage} by 50% and increases their {attribute Safe Fall Distance} by 10 blocks.",
  "infusion_codex.alchemancy:capturing.flavor": "I Choose you!",
  "infusion_codex.alchemancy:capturing.other_effects": "Allows the item to store a single entity inside of itself. Makes the item non-stackable.",
  "infusion_codex.alchemancy:capturing.when_shot": "Releases the captured entity on impact. If empty, captures the impacted entity and drops the item onto the ground.",
  "infusion_codex.alchemancy:capturing.when_shot_from_dispenser": "Releases the stored entity first before dispensing itself.",
  "infusion_codex.alchemancy:capturing.when_used_entity": "Picks up and captures the targeted entity if the item is empty. If not, then the captured is instead released.",
  "infusion_codex.alchemancy:charred.flavor": "A little overcooked...",
  "infusion_codex.alchemancy:charred.other_effects": "Allows the item to be used as {item Furnace} fuel, letting it smelt 1 item for every 16 durability points it has left. Increases the item's fuel efficiency by 200% if it's aleady a {item Furnace} fuel.",
  "infusion_codex.alchemancy:chopping.attribute_modifier": "Allows the item to break Axe-related blocks, starting at wooden tier if the item isn't already a tool.",
  "infusion_codex.alchemancy:chopping.flavor": "There must be some trees around here somewhere",
  "infusion_codex.alchemancy:chopping.when_shot": "Breaks Axe-related blocks on impact. The faster the projectile goes, the more likely it is to continue its trajectory after breaking a block.",
  "infusion_codex.alchemancy:chopping.when_used_block": "Strips {item Logs} and removes wax from {item Copper Blocks}",
  "infusion_codex.alchemancy:chromatize.activate": "Applies a colored tint to the target equal to the item's {property alchemancy:tinted} color.",
  "infusion_codex.alchemancy:chromatize.flavor": "Taste the rainbow!",
  "infusion_codex.alchemancy:chromatize.when_shot": "When hitting an entity, applies a colored tint to the target equal to the item's {property alchemancy:tinted} color.",
  "infusion_codex.alchemancy:cloud_dash.flavor": "Great for climbing mountains",
  "infusion_codex.alchemancy:cloud_dash.while_equipped": "Allows the user to dash forwards in the direction they're facing at the start of a sprint, consuming 2 points of durability. Dash distance is influenced by the user's {attribute Movement Speed}. Only one dash can be performed before touching the ground.",
  "infusion_codex.alchemancy:clueless.flavor": "huh?",
  "infusion_codex.alchemancy:clueless.while_in_inventory": "Resets any information stored by other {system Infusion}, such as items stored by {property alchemancy:hollow}, {property alchemancy:pristine} Points, {property alchemancy:wayfinding} target, etc. This {system Infusion} is consumed after successfully doing so.",
  "infusion_codex.alchemancy:compact.flavor": "Store more items per item",
  "infusion_codex.alchemancy:compact.other_effects": "Multiplies the item's max stack size by 4, with a hard limit of 96. Some items with stored entities or items, such as {item Shulker Boxes} and {item Beehives} may negate this effect.",
  "infusion_codex.alchemancy:concealed.flavor": "Completely invisible",
  "infusion_codex.alchemancy:concealed.visual": "Prevents the item from rendering outside of the inventory screen.",
  "infusion_codex.alchemancy:conductive.flavor": "Would be good to stay away from livewires for a while",
  "infusion_codex.alchemancy:conductive.receive_damage_equipped": "Emits a chaining {shock Electric} attack onto nearby entities for half of the damage received after taking {shock Electric} damage.",
  "infusion_codex.alchemancy:conductive.while_equipped": "Makes the user prone to Lightning strikes during thunderstorms.",
  "infusion_codex.alchemancy:cozy.flavor": "Nice and warm",
  "infusion_codex.alchemancy:cozy.while_rooted": "Swiftly thaws out all entities standing inside of the item.",
  "infusion_codex.alchemancy:cozy.while_worn": "Increases the rate at which the user thaws out, enough to prevent {item Powder Snow} from having any effect.",
  "infusion_codex.alchemancy:cracked.activate": "Breaks the item or consumes 1 durability point.",
  "infusion_codex.alchemancy:cracked.durability_consumed": "40% chance to consume double durability.",
  "infusion_codex.alchemancy:cracked.flavor": "Falling apart",
  "infusion_codex.alchemancy:crackling.flavor": "Be the light of the party",
  "infusion_codex.alchemancy:crackling.on_crit": "Creates a Firework explosion at the target's position, damaging all nearby entities, including the user. The explosion's effects depend on the {item Firework Rocket} or {item Firework Star} used to obtain this {system Infusion}.",
  "infusion_codex.alchemancy:crafty.flavor": "Crafting on the go",
  "infusion_codex.alchemancy:crafty.when_used": "Opens the {item Crafting Table} interface.",
  "infusion_codex.alchemancy:crouch_entangled.flavor": "Stealth mode: engaged",
  "infusion_codex.alchemancy:crouch_entangled.stacked_on": "Allows the item to permanently store an additional item within itself as long as it has an additional {system Infusion Slot} to apply this {system Infusion} to it. If either item is destroyed or consumed, the other will also be lost.",
  "infusion_codex.alchemancy:crouch_entangled.while_equipped": "Swaps this item with its {property alchemancy:entangled} counterpart while crouching.",
  "infusion_codex.alchemancy:crystal_dash.flavor": "Fully realized",
  "infusion_codex.alchemancy:crystal_dash.while_equipped": "Allows the user to dash forwards with great speed in the direction they're facing at the start of a sprint, consuming 2 points of durability. Dash distance is influenced by the user's {attribute Movement Speed}. Only 2 dashes can be performed in succession before touching the ground.",
  "infusion_codex.alchemancy:dead.flavor": "A husk of its former self",
  "infusion_codex.alchemancy:dead.other_effects": "Disables most of the item's base attributes and abilities, including {attribute Attribute Modifiers}, block-breaking efficiencies, right-click functionality, food effects, and {system Innate Properties}. Does not negate the effects of {system Infusions}",
  "infusion_codex.alchemancy:death_ward.flavor": "Born again!",
  "infusion_codex.alchemancy:death_ward.other_effects": "Makes the item non-stackable.",
  "infusion_codex.alchemancy:death_ward.while_equipped": "Saves the user from dying at the cost of 500 durability points, or the item itself.",
  "infusion_codex.alchemancy:decaying.flavor": "Withering away",
  "infusion_codex.alchemancy:decaying.on_attack": "Applies Wither II to the target for 5 seconds.",
  "infusion_codex.alchemancy:decaying.while_equipped": "Loses durability every second.",
  "infusion_codex.alchemancy:dense.flavor": "Stomping... Koopas",
  "infusion_codex.alchemancy:dense.modify_damage": "Increases damage dealt equal to the amount of time the user has been falling for.",
  "infusion_codex.alchemancy:dense.on_fall": "Applies damage to nearby entities equal to the amount of time the user has been falling for. If landing after falling for more than 6 blocks, the item {activate Activates} on the user.",
  "infusion_codex.alchemancy:depth_dweller.flavor": "Yearn for the mines",
  "infusion_codex.alchemancy:depth_dweller.while_held_mainhand": "Increases the user's {attribute Mining Speed} relative to how low down they are in the world starting at Y=10, with a maximum increase of 50%. While in {nether The Nether}, the {attribute Mining Speed} boost is always 200%",
  "infusion_codex.alchemancy:depth_dweller.while_worn_boots": "Increases the user's {attribute Movement Speed} relative to how low down they are in the world starting at Y=10, with a maximum increase of 50%. While in {nether The Nether}, the {attribute Movement Speed} boost is always 200%",
  "infusion_codex.alchemancy:depth_dweller.while_worn_leggings": "Increases the user's {attribute Movement Speed} relative to how low down they are in the world starting at Y=10, with a maximum increase of 50%. While in {nether The Nether}, the {attribute Movement Speed} boost is always 200%",
  "infusion_codex.alchemancy:dexterous.flavor": "Acrobatics? Sleight of Hand? you got it",
  "infusion_codex.alchemancy:dexterous.while_equipped": "Negates the {attribute Movement Speed} penalty from using items.",
  "infusion_codex.alchemancy:digging.attribute_modifier": "Allows the item to break Shovel-related blocks, starting at wooden tier if the item isn't already a tool.",
  "infusion_codex.alchemancy:digging.flavor": "Diggy diggy hole, digging a hole",
  "infusion_codex.alchemancy:digging.when_shot": "Breaks Shovel-related blocks on impact. The faster the projectile goes, the more likely it is to continue its trajectory after breaking a block.",
  "infusion_codex.alchemancy:digging.when_used_block": "Can turn {item Dirt} into {item Dirt Path} and put out {item Campfires}",
  "infusion_codex.alchemancy:dirty.flavor": "Filthy",
  "infusion_codex.alchemancy:dirty.other_effects": "It's dirt. Get it off, ew.",
  "infusion_codex.alchemancy:disguised.flavor": "Intruder alert! Red Spy is in the base",
  "infusion_codex.alchemancy:disguised.stacked_over": "Sets the item's disguise to the one being stacked on top of it if no disguise has been assigned yet.",
  "infusion_codex.alchemancy:disguised.visual": "Allows the item to take up the appearance of any other item.",
  "infusion_codex.alchemancy:disguised.when_used": "While crouching, and if no disguise has been set yet, sets the item's disguise to the one in the user's offhand.",
  "infusion_codex.alchemancy:divine_cleanse.flavor": "Evil begone!",
  "infusion_codex.alchemancy:divine_cleanse.stacked_over": "Removes {property_list alchemancy:affected_by_divine_cleanse} from the target item.",
  "infusion_codex.alchemancy:dripping.flavor": "You might want to call a plumber",
  "infusion_codex.alchemancy:dripping.on_attack": "Releases the contents of {property alchemancy:hollow}, {property alchemancy:bucketing}, {property alchemancy:encapsulating}, and {property alchemancy:capturing}, on the target's position.",
  "infusion_codex.alchemancy:dripping.receive_damage_worn": "Releases the contents of {property alchemancy:hollow}, {property alchemancy:bucketing}, {property alchemancy:encapsulating}, and {property alchemancy:capturing}, on the user's position.",
  "infusion_codex.alchemancy:edible.attribute_modifier": "If the item can already be eaten, its Nutrition value is increased by 50% and its saturation gain by 25%.",
  "infusion_codex.alchemancy:edible.flavor": "Mmmm... tasty!",
  "infusion_codex.alchemancy:edible.when_used": "Allows the item to be eaten, {activate Activating} on the user and consuming 10 durability points or the item in its entirety.",
  "infusion_codex.alchemancy:encapsulating.flavor": "All you have to do is Carry On.",
  "infusion_codex.alchemancy:encapsulating.other_effects": "Allows the item to store a single block inside of itself, keeping all of its data when placed back down. Makes the item non-stackable.",
  "infusion_codex.alchemancy:encapsulating.when_shot_from_dispenser": "Places the stored block down first before dispensing itself.",
  "infusion_codex.alchemancy:encapsulating.when_used_block": "Picks up and stores the targeted block if the item is empty. If not, then the stored block is instead placed down.",
  "infusion_codex.alchemancy:enchanting.attribute_modifier": "Doubles the item's {attribute Enchantability}, or sets it to at least 20.",
  "infusion_codex.alchemancy:enchanting.flavor": "Both magically adept AND charismatic",
  "infusion_codex.alchemancy:enchanting.other_effects": "Makes items cost no more than 1 Experience Level to repair at an {item Anvil}.",
  "infusion_codex.alchemancy:ender.activate": "Teleports the target to a random position.",
  "infusion_codex.alchemancy:ender.flavor": "Gone in the blink of an eye",
  "infusion_codex.alchemancy:ender.when_shot": "Teleports the projectile's owner to its position on impact.",
  "infusion_codex.alchemancy:ender.while_equipped": "Teleports the user to a random position right after entering {item Water} or making contact with rain, consuming 10 points of durability or having a 50% chance to destroy the item.",
  "infusion_codex.alchemancy:energized.activate_by_block": "{item Redstone} powers the adjacent blocks for 1 second.",
  "infusion_codex.alchemancy:energized.flavor": "Need more power",
  "infusion_codex.alchemancy:energized.receive_damage_equipped": "Increases the user's {attribute Movement Speed}, {attribute Mining Speed}, and {attribute Attack Speed} by 35% for 60 seconds after taking {shock Electric} damage.",
  "infusion_codex.alchemancy:energized.when_shot": "{item Redstone} powers the impacted block for half a second.",
  "infusion_codex.alchemancy:energized.when_used_block": "If {property alchemancy:interactable} is present, {item Redstone} powers the targeted block for half a second.",
  "infusion_codex.alchemancy:energized.while_worn_boots": "For 60 seconds after taking {shock Electric} damage, {item Redstone} powers blocks the user is standing on for half a second.",
  "infusion_codex.alchemancy:energy_sapper.flavor": "A symbiotic relationship",
  "infusion_codex.alchemancy:energy_sapper.on_attack": "Consumes a portion of the target player's Hunger.",
  "infusion_codex.alchemancy:energy_sapper.while_equipped": "Has a 20% chance every second to consume some of the user's Hunger in order to replenish the item's durability by 1 point, as long as the item has 10 or more points of durability consumed.",
  "infusion_codex.alchemancy:entangled.activate": "Swaps this item with its {property alchemancy:entangled} counterpart.",
  "infusion_codex.alchemancy:entangled.flavor": "Two for the price of one",
  "infusion_codex.alchemancy:entangled.stacked_on": "Allows the item to permanently store an additional item within itself as long as it has an additional {system Infusion Slot} to apply this {system Infusion} to it. If either item is destroyed or consumed, the other will also be lost.",
  "infusion_codex.alchemancy:eternal.flavor": "Hasn't aged a day",
  "infusion_codex.alchemancy:eternal.when_dropped": "Prevents the item from despawning.",
  "infusion_codex.alchemancy:eternal_glow.flavor": "Light up the skies",
  "infusion_codex.alchemancy:eternal_glow.while_equipped": "Automatically place down a {item Glowing Orb} at your feet when the light level is low enough.",
  "infusion_codex.alchemancy:experienced.durability_consumed": "Has a 30% chance to grant the user a random amount of Experience Points between 1 and the amount of durability consumed.",
  "infusion_codex.alchemancy:experienced.flavor": "Very good at what it does",
  "infusion_codex.alchemancy:experienced.on_destroy": "Drops Experience Points proportional to the amount of durability left on the item.",
  "infusion_codex.alchemancy:exploding.flavor": "An earth-shattering kaboom",
  "infusion_codex.alchemancy:exploding.on_crit": "Creates an explosion around the target, greatly damaging the item or destroying it in the process.",
  "infusion_codex.alchemancy:extended.attribute_modifier": "Doubles the flight duration for {item Firework Rockets}. Increases the effect distance of some radius-based {system Infusions}.",
  "infusion_codex.alchemancy:extended.flavor": "You might be reaching a little",
  "infusion_codex.alchemancy:extended.while_held_mainhand": "Increases the user's {attribute Block Interaction Range} and {attribute Entity Interaction Range} by 2 blocks.",
  "infusion_codex.alchemancy:extended.while_using": "Doubles the item's use time.",
  "infusion_codex.alchemancy:extended.while_worn_boots": "Increases the user's {attribute Step Height} by 0.5 blocks.",
  "infusion_codex.alchemancy:feral.flavor": "Standing here, I realize",
  "infusion_codex.alchemancy:feral.while_held": "Increases the user's {attribute Attack Speed} by 45%.",
  "infusion_codex.alchemancy:ferrous.attribute_modifier": "Increases the item's total durability by 150 points.",
  "infusion_codex.alchemancy:ferrous.flavor": "Heavy metal",
  "infusion_codex.alchemancy:ferrous.while_worn": "Increases the amount of {shock Electric} damage received by 25%.",
  "infusion_codex.alchemancy:fire_resistant.flavor": "Someone remembered to put on sunscreen",
  "infusion_codex.alchemancy:fire_resistant.when_dropped": "Makes the item immune to fire.",
  "infusion_codex.alchemancy:fire_resistant.while_worn": "Reduces the user's amount of time set on fire by 75%, limiting their time set on fire to at most 12 seconds.",
  "infusion_codex.alchemancy:firestarting.flavor": "I swear we didn't",
  "infusion_codex.alchemancy:firestarting.when_shot_from_dispenser": "Creates {item Fire} at the block in front. Light {item Candles} and {item Campfires} in front of the {item Dispenser}.",
  "infusion_codex.alchemancy:firestarting.when_used_block": "Creates {item Fire} at the targeted block. Allows the item to light {item Candles} and {item Campfires}.",
  "infusion_codex.alchemancy:flame_emperor.block_destroyed": "Smelts all dropped items while the user is on fire.",
  "infusion_codex.alchemancy:flame_emperor.flavor": "The air is getting warmer around you",
  "infusion_codex.alchemancy:flame_emperor.modify_damage": "Increases damage by 25%, with a limit of 3 times the attack's base damage, while the user is on fire.",
  "infusion_codex.alchemancy:flame_emperor.on_attack": "Sets the target on fire for 3 seconds, or 6 seconds if the user is also on fire.",
  "infusion_codex.alchemancy:flame_emperor.while_held_mainhand": "Doubles the user's {attribute Mining Speed} while on fire.",
  "infusion_codex.alchemancy:flame_step.flavor": "Like TRON, but for arsonists",
  "infusion_codex.alchemancy:flame_step.while_worn_boots": "Creates a trail of short-lasting {item Fire} while sprinting. Extends the duration of {item Fire} under the player while standing still.",
  "infusion_codex.alchemancy:flammable.flavor": "All we need now is a spark",
  "infusion_codex.alchemancy:flammable.on_attack": "While the user is on fire, sets the target on fire for the same amount of time as the user.",
  "infusion_codex.alchemancy:flammable.other_effects": "Allows the item to be used as {item Furnace} fuel, letting it smelt 1 item for every 33 durability points it has left. Increases the item's fuel efficiency by 50% if it's aleady a {item Furnace} fuel.",
  "infusion_codex.alchemancy:flammable.while_equipped": "Constantly increases the user's time on fire after being set on fire once. Has a 1% chance every tick to turn into {property alchemancy:charred}",
  "infusion_codex.alchemancy:flattened.flavor": "Great for starting a poster collection",
  "infusion_codex.alchemancy:flattened.visual": "Makes the item appear completely flat.",
  "infusion_codex.alchemancy:flattened.when_used_block": "Places the item onto a solid surface, which can then be picked back up by punching it.",
  "infusion_codex.alchemancy:flimsy.flavor": "Barely sturdier than a wet noodle",
  "infusion_codex.alchemancy:flimsy.other_effects": "Makes the item incapable of breaking blocks.",
  "infusion_codex.alchemancy:flourish.flavor": "Blooms like a flower during spring",
  "infusion_codex.alchemancy:flourish.while_equipped": "Increases health recovery from all sources by 10% rounded up.",
  "infusion_codex.alchemancy:fragmented.flavor": "Split into two",
  "infusion_codex.alchemancy:fragmented.stacked_on": "If right-clicked from the inventory with an empty cursor, a copy of the item will be created, splitting the item's durability lost and {attribute Max Durability} between the two. If the item has a {attribute Max Durability} of 1 or less, the item is instead destroyed.",
  "infusion_codex.alchemancy:friendly.flavor": "Friendly-fire is overrated anyways",
  "infusion_codex.alchemancy:friendly.while_equipped": "Prevents your attacks from damaging Passive Mobs and other Players.",
  "infusion_codex.alchemancy:frosted.flavor": "Cooling it down",
  "infusion_codex.alchemancy:frosted.on_attack": "Freezes the target for 12 seconds.",
  "infusion_codex.alchemancy:frosted.while_rooted": "Freezes all entities standing inside of the item.",
  "infusion_codex.alchemancy:frosted.while_worn": "Constantly freezes the user.",
  "infusion_codex.alchemancy:fungal.activate": "Extends the item's {activate Activation} effects to all entities within a 4-block radius with a cooldown of 20 seconds.",
  "infusion_codex.alchemancy:fungal.flavor": "The fungus among us",
  "infusion_codex.alchemancy:fungal.receive_damage_equipped": "{activate Activates} on all entities within a 4-block radius with a cooldown of 20 seconds.",
  "infusion_codex.alchemancy:gambling.flavor": "...aw dang it",
  "infusion_codex.alchemancy:gambling.modify_damage": "has a 33% chance of dealing double damage, 33% chance of dealing normal damage, and 33% chance of damaging the user instead.",
  "infusion_codex.alchemancy:gilded.flavor": "All that glitters",
  "infusion_codex.alchemancy:gilded.when_dropped": "Makes Piglins want to pick up the item.",
  "infusion_codex.alchemancy:gilded.while_held_mainhand": "Increases the user's {attribute Mining Speed} by 50%.",
  "infusion_codex.alchemancy:gilded.while_worn": "Prevents Piglins from immediately attacking the user.",
  "infusion_codex.alchemancy:glider.flavor": "Falling with style",
  "infusion_codex.alchemancy:glider.while_worn_chestplate": "Lets the user glide as if they were wearing an {item Elytra} as long as the item is more than 1 point of durability away from breaking.",
  "infusion_codex.alchemancy:glowing_aura.flavor": "A beacon of light",
  "infusion_codex.alchemancy:glowing_aura.on_attack": "Applies Glowing to the target for 30 seconds.",
  "infusion_codex.alchemancy:glowing_aura.when_dropped": "Enshrouds the item in a glowing aura.",
  "infusion_codex.alchemancy:glowing_aura.when_shot": "Enshrouds the Projectile in a glowing aura.",
  "infusion_codex.alchemancy:glowing_aura.while_equipped": "Applies Glowing to the user for as long as its equipped.",
  "infusion_codex.alchemancy:grappling.flavor": "Get over here!",
  "infusion_codex.alchemancy:grappling.on_attack": "Pulls targets towards you, instead of knocking them back.",
  "infusion_codex.alchemancy:gust_jet.flavor": "Blow their socks off",
  "infusion_codex.alchemancy:gust_jet.while_using": "Blows the user backwards unless they're crouching while standing on solid ground. Knocks all entities in front of the user back, with a 20% chance every tick of triggering {function on_attack} effects on them. Consumes 1 durability point or the item itself every 2 seconds.",
  "infusion_codex.alchemancy:gust_jet.while_worn_boots": "Blows the user a moderate distance away from the ground.. Knocks all entities under the user back, with a 20% chance every tick of triggering {function on_attack} effects on them. Consumes 1 durability point or the item itself every 2 seconds.",
  "infusion_codex.alchemancy:hardened.durability_consumed": "Halves the amount of durability consumed by the item, or has a 10% chance not to consume any durability if the amount consumed is 1. ",
  "infusion_codex.alchemancy:hardened.flavor": "Tough as nails",
  "infusion_codex.alchemancy:hardened.when_shot": "Allows the projectile to break certain blocks on impact, such as {item Glass}, {item Ice} or {item Decorated Pots}.",
  "infusion_codex.alchemancy:headwear.flavor": "Anything is a hat if you're brave enough",
  "infusion_codex.alchemancy:headwear.other_effects": "Allows the item to be worn in the Helmet slot.",
  "infusion_codex.alchemancy:headwear.when_shot_from_dispenser": "Equips the item onto the Helmet slot of an Entity in front of the {item Dispenser}.",
  "infusion_codex.alchemancy:hearty.activate": "Grants the target Health Boost II for 20 seconds.",
  "infusion_codex.alchemancy:hearty.after_use": "Grants the user Health Boost II for 8 minutes after being eaten.",
  "infusion_codex.alchemancy:hearty.flavor": "Keeps the doctor away",
  "infusion_codex.alchemancy:hearty.while_worn": "Increases the user's {attribute Max Health} by 2.",
  "infusion_codex.alchemancy:heavy.flavor": "Hard to carry",
  "infusion_codex.alchemancy:heavy.when_dropped": "Increases the item's falling speed.",
  "infusion_codex.alchemancy:heavy.when_shot": "Increases the projectile's falling speed.",
  "infusion_codex.alchemancy:heavy.while_equipped": "Reduces the user's {attribute Movement Speed} and {attribute Jump Height}, as well as increasing their falling speed.",
  "infusion_codex.alchemancy:hellbent.block_destroyed": "Increases the user's {attribute Mining Speed} for each block of the same type destroyed, up to an additional total of 20%. The speed boost is lost when a different type of block is mined or another item is held.",
  "infusion_codex.alchemancy:hellbent.flavor": "Stop at nothing",
  "infusion_codex.alchemancy:hellbent.modify_damage": "Makes attacks always crit, triggering {function on_crit} effects and consuming 5 durability points or the item itself.",
  "infusion_codex.alchemancy:hellbent.when_shot": "Triggers {function on_crit} effects when hitting an entity.",
  "infusion_codex.alchemancy:hollow.flavor": "Store items within your items",
  "infusion_codex.alchemancy:hollow.other_effects": "Allows the item to store up to one stack of a single item. Makes the item non-stackable.",
  "infusion_codex.alchemancy:hollow.pick_up_while_equipped": "Stores the picked up item if enough space is present for it.",
  "infusion_codex.alchemancy:hollow.stacked_over": "Stores the stacked item if enough space is available. Retrieves any stored items when right-clicked with an empty cursor.",
  "infusion_codex.alchemancy:hollow.when_shot_from_dispenser": "Dispenses any stored items first before dispensing itself.",
  "infusion_codex.alchemancy:hollow.when_used": "Drops onto the ground any stored items.",
  "infusion_codex.alchemancy:hollow.while_rooted": "When right-clicked, stores the user's held item if enough space is available. When right-clicked, retrieves the contents of the item.",
  "infusion_codex.alchemancy:home_run.activate": "Knocks the target back a great distance away from the item, consuming 10 durability points or the item itself.",
  "infusion_codex.alchemancy:home_run.attribute_modifier": "Sets the item's base {attribute Attack Speed} to 0.2",
  "infusion_codex.alchemancy:home_run.flavor": "And the crowd goes wild!",
  "infusion_codex.alchemancy:home_run.modify_damage": "Knocks the target back a great distance if the attack deals at least 80% of the user's {attribute Attack Damage} stat, consuming 10 durability points or the item itself.",
  "infusion_codex.alchemancy:hungering.flavor": "Ever-famished",
  "infusion_codex.alchemancy:hungering.while_equipped": "Constantly attempts to consume items in the user's inventory if they're hungry enough for them to take full-effect.",
  "infusion_codex.alchemancy:hungering.while_held": "Instantly consumes the item if it can be eaten.",
  "infusion_codex.alchemancy:hydrophobic.flavor": "Really doesn't like showers",
  "infusion_codex.alchemancy:hydrophobic.when_shot": "{activate Activates} the item on the projectile right after entering {item Water}.",
  "infusion_codex.alchemancy:hydrophobic.while_equipped": "{activate Activates} the item on the user right after entering {item Water}.",
  "infusion_codex.alchemancy:infected.flavor": "You don't want it on your lawn",
  "infusion_codex.alchemancy:infected.on_attack": "Spreads itself onto a random item in the target's inventory.",
  "infusion_codex.alchemancy:infected.visual": "Tints the item with an ugly color.",
  "infusion_codex.alchemancy:infected.while_in_inventory": "Slowly spreads itself onto other items in the user's inventory. Has a 0.2% chance every second to turn into {property alchemancy:dead}.",
  "infusion_codex.alchemancy:infusion_cleanse.flavor": "The most absorbent material I've ever used",
  "infusion_codex.alchemancy:infusion_cleanse.stacked_over": "Removes all {system Infusions} from the target item.",
  "infusion_codex.alchemancy:infusion_codex.flavor": "Quite the inception",
  "infusion_codex.alchemancy:infusion_codex.stacked_over": "Inspects the targeted item, opening an {item Infusion Codex} index menu filtered to only show its applied {system Infusions}, {system Innate Properties}, and {property alchemancy:revealed} or {property alchemancy:awakened} {system Properties}",
  "infusion_codex.alchemancy:infusion_codex.when_used": "Opens the {item Infusion Codex}'s index menu.",
  "infusion_codex.alchemancy:insulated.flavor": "A key part of any Energized build",
  "infusion_codex.alchemancy:insulated.receive_damage_worn_or_using": "Reduces incoming {shock Electric} damage by 25%.",
  "infusion_codex.alchemancy:interactable.flavor": "Clickity-click",
  "infusion_codex.alchemancy:interactable.when_shot": "{activate Activates} the item on the impacted entity.",
  "infusion_codex.alchemancy:interactable.when_shot_from_dispenser": "{activate Activates} the item on the entity in front of the {item Dispenser} if any is present.",
  "infusion_codex.alchemancy:interactable.when_used": "{activate Activates} the item on the user, going into Cooldown for 1 second after doing so.",
  "infusion_codex.alchemancy:interactable.when_used_entity": "{activate Activates} the item on the target, going into Cooldown for 1 second after doing so.",
  "infusion_codex.alchemancy:interactable.while_rooted": "{activate Activates} the item on the user when right-clicked.",
  "infusion_codex.alchemancy:item_pull.flavor": "Great for mob farms and loot goblins",
  "infusion_codex.alchemancy:item_pull.when_dropped": "Teleports all dropped items in a 5-block radius to itself.",
  "infusion_codex.alchemancy:item_pull.when_shot": "Teleports all dropped items in a 5-block radius to itself.",
  "infusion_codex.alchemancy:item_pull.while_equipped": "Attempts to pick up all dropped items in a 5-block radius.",
  "infusion_codex.alchemancy:item_pull.while_rooted": "Teleports all dropped items in a 5-block radius to itself.",
  "infusion_codex.alchemancy:jagged.flavor": "Quite the thorn on my side",
  "infusion_codex.alchemancy:jagged.pick_up": "Damages the user equal to the the item's {attribute Attack Damage}, triggering {function modify_damage} effects.",
  "infusion_codex.alchemancy:jagged.when_hit_worn_or_using": "Damages the attacker equal to the the item's {attribute Attack Damage}, triggering {function modify_damage} effects.",
  "infusion_codex.alchemancy:jump_entangled.flavor": "Gives me an idea for a jetpack of sorts",
  "infusion_codex.alchemancy:jump_entangled.stacked_on": "Allows the item to permanently store an additional item within itself as long as it has an additional {system Infusion Slot} to apply this {system Infusion} to it. If either item is destroyed or consumed, the other will also be lost.",
  "infusion_codex.alchemancy:jump_entangled.while_equipped": "Swaps this item with its {property alchemancy:entangled} counterpart while jumping.",
  "infusion_codex.alchemancy:kinetic_grab.flavor": "Wanna have a bad time?",
  "infusion_codex.alchemancy:kinetic_grab.when_used_entity": "Holds the target entity in front of the user for as long as the item is used or until the user takes damage.",
  "infusion_codex.alchemancy:kinetic_recharge.flavor": "Just keep moving!",
  "infusion_codex.alchemancy:kinetic_recharge.while_equipped": "Restores the item's durability while the user is in motion. The faster the user is going, the faster the item is repaired.",
  "infusion_codex.alchemancy:launching.flavor": "To the moon",
  "infusion_codex.alchemancy:launching.on_crit": "Launches targets upwards, instead of knocking them back.",
  "infusion_codex.alchemancy:lazy.flavor": "...Perhaps another day",
  "infusion_codex.alchemancy:lazy.when_dropped": "Doubles the item's pickup delay, making it take longer to pick up.",
  "infusion_codex.alchemancy:lazy.when_shot": "Causes the projectile to slow down over time.",
  "infusion_codex.alchemancy:lazy.while_equipped": "Prevents the user from picking up dropped Items.",
  "infusion_codex.alchemancy:leaping.flavor": "A hop, a skip, and a jump",
  "infusion_codex.alchemancy:leaping.while_worn_boots": "Increases the user's {attribute Jump Height}, increasing the height of each consecutive jump for up to 4 jumps in a row. Increases {attribute Safe Fall Distance} by 7 blocks.",
  "infusion_codex.alchemancy:leaping.while_worn_leggings": "Increases the user's {attribute Jump Height}, increasing the height of each consecutive jump for up to 4 jumps in a row. Increases {attribute Safe Fall Distance} by 7 blocks.",
  "infusion_codex.alchemancy:levitating.flavor": "Great view from up here",
  "infusion_codex.alchemancy:levitating.when_shot": "Makes the projectile float upwards.",
  "infusion_codex.alchemancy:levitating.while_equipped": "Makes the user float upwards.",
  "infusion_codex.alchemancy:light_seeking.flavor": "Like a moth to the flame",
  "infusion_codex.alchemancy:light_seeking.when_dropped": "Pulls itself towards the nearest entity on fire or with the Glowing effect in a 24-block radius.",
  "infusion_codex.alchemancy:light_seeking.when_shot": "Homes in on the nearest entity on fire or with the Glowing effect in a 24-block radius.",
  "infusion_codex.alchemancy:lightweight.flavor": "Lighter than a feather",
  "infusion_codex.alchemancy:lightweight.when_dropped": "Lowers the item's falling speed.",
  "infusion_codex.alchemancy:lightweight.when_shot": "Lowers the projectile's falling speed.",
  "infusion_codex.alchemancy:lightweight.while_worn_boots": "Allows the user to walk on {item Powder Snow}.",
  "infusion_codex.alchemancy:limit_break.attribute_modifier": "Grants an additional {system Infusion Slot}",
  "infusion_codex.alchemancy:limit_break.flavor": "This is to go even further beyond!",
  "infusion_codex.alchemancy:living_battery.flavor": "Amped up!",
  "infusion_codex.alchemancy:living_battery.other_effects": "Excess durability recovered from other {system Infusions} is converted into 50 FE per point and stored into the item's internal energy buffer.",
  "infusion_codex.alchemancy:loose.flavor": "I don't like sand. It's coarse and it gets everywhere",
  "infusion_codex.alchemancy:loose.other_effects": "Prevents items from being worn in any armor slot.",
  "infusion_codex.alchemancy:loose.when_used_block": "Causes blocks to fall like {item Sand} when placed for the first time.",
  "infusion_codex.alchemancy:loyal.flavor": "Always by your side",
  "infusion_codex.alchemancy:loyal.when_dropped": "Slowly floats back to the dropper after a short period of time.",
  "infusion_codex.alchemancy:loyal.when_shot": "Floats back to the shooter after impacting a block or an entity.",
  "infusion_codex.alchemancy:lustrous.attribute_modifier": "Sets the item's tool material to {item Diamond} tier. Doubles the item's durability up to a maximum total of 1600.",
  "infusion_codex.alchemancy:lustrous.flavor": "Funding for Schaffrillas is provided by",
  "infusion_codex.alchemancy:magic_resistant.flavor": "Hard counters Arcane Barrage",
  "infusion_codex.alchemancy:magic_resistant.receive_damage_worn_or_using": "Reduces incoming {arcane Magic} damage by 15%.",
  "infusion_codex.alchemancy:magnetic.flavor": "Become the master of magnetism!",
  "infusion_codex.alchemancy:magnetic.while_equipped": "Repels the user from other Entities with {property alchemancy:magnetic} items equipped in a 5-block radius.",
  "infusion_codex.alchemancy:magnetic.while_rooted": "Pulls in Iron Golems and attempts to strip all Entities in a 20-block radius from their {property alchemancy:ferrous}{system -Infused} or {system Dormant} equipped items.",
  "infusion_codex.alchemancy:magnetic.while_using": "Pulls in Iron Golems and attempts to strip all Entities in a 20-block radius from their {property alchemancy:ferrous}{system -Infused} or {system Dormant} equipped items.",
  "infusion_codex.alchemancy:magnetic.while_worn_boots": "Grants full knockback immunity and somewhat hinders the user's ability to jump while standing on {property alchemancy:ferrous}-granting blocks.",
  "infusion_codex.alchemancy:magnetic.while_worn_chestplate": "Allows the user to stick to {property alchemancy:ferrous}{system -Dormant} blocks.",
  "infusion_codex.alchemancy:magnetic.while_worn_helmet": "Allows the user to stick to {property alchemancy:ferrous}{system -Dormant} blocks.",
  "infusion_codex.alchemancy:magnetic.while_worn_leggings": "Allows the user to stick to {property alchemancy:ferrous}{system -Dormant} blocks.",
  "infusion_codex.alchemancy:malleable.flavor": "Great for Stop Motion Animation",
  "infusion_codex.alchemancy:malleable.on_destroy": "The item drops an {item Unshaped Clay}, which can be combined with a {item Clay Ball} or smelted down to restore the item.",
  "infusion_codex.alchemancy:mending.flavor": "Gureto desu yo, koitsu wa",
  "infusion_codex.alchemancy:mending.modify_damage": "Attacks heal the target instead of dealing damage.",
  "infusion_codex.alchemancy:mending.receive_damage_worn": "If the user is under 20% health, the item is destroyed to heal the user for 40% of their {attribute Max Health}.",
  "infusion_codex.alchemancy:mending.while_rooted": "Heals all entities standing on the item for 2 health points every 3 seconds.",
  "infusion_codex.alchemancy:mending.while_worn": "Consumes 1 point of durability every 5 seconds to heal the user for 1 health point.",
  "infusion_codex.alchemancy:mining.attribute_modifier": "Allows the item to break Pickaxe-related blocks, starting at wooden tier if the item isn't already a tool.",
  "infusion_codex.alchemancy:mining.flavor": "I don't know what I'll mine. I'll mine it anyway",
  "infusion_codex.alchemancy:mining.when_shot": "Breaks Pickaxe-related blocks on impact. The faster the projectile goes, the more likely it is to continue its trajectory after breaking a block.",
  "infusion_codex.alchemancy:muffled.flavor": "Keeping it quiet",
  "infusion_codex.alchemancy:muffled.while_equipped": "Lowers the volume of most sounds emitted by the user by 25%.",
  "infusion_codex.alchemancy:muffled.while_held_mainhand": "Suppresses vibrations emitted by placing blocks, using items, interacting with Entities, shearing, and shooting projectiles.",
  "infusion_codex.alchemancy:muffled.while_held_offhand": "Suppresses vibrations emitted by placing blocks, using items, interacting with Entities, and shearing.",
  "infusion_codex.alchemancy:muffled.while_worn_boots": "Suppresses vibrations emitted by steps, splashing, and hitting the ground.",
  "infusion_codex.alchemancy:muffled.while_worn_chestplate": "Suppresses vibrations emitted by taking damage, dying, gliding, and teleporting.",
  "infusion_codex.alchemancy:muffled.while_worn_helmet": "Suppresses vibrations emitted by eating and drinking.",
  "infusion_codex.alchemancy:muffled.while_worn_leggings": "Suppresses vibrations emitted by taking damage, dying, splashing, swimming, and teleporting.",
  "infusion_codex.alchemancy:musical.flavor": "I think I feel a song coming on",
  "infusion_codex.alchemancy:musical.when_used": "Makes the item play a musical note. The note's pitch is determined by the user's looking pitch, and the instrument used is determined by the item being used.",
  "infusion_codex.alchemancy:musical.while_worn_boots": "Makes the user play a musical note when moving on the ground. The note's pitch is determined by the user's horizontal movement speed, and the instrument used is determined by the block they're standing on.",
  "infusion_codex.alchemancy:nocturnal.flavor": "I am vengeance, I am the night",
  "infusion_codex.alchemancy:nocturnal.modify_damage": "Increases damage dealt by 40% while under direct moonlight.",
  "infusion_codex.alchemancy:nocturnal.while_worn_helmet": "Applies Night Vision to the user for 15 seconds.",
  "infusion_codex.alchemancy:nonlethal.flavor": "As deadly as a pillow",
  "infusion_codex.alchemancy:nonlethal.modify_damage": "Negates all damage dealt by this item, while still triggering {function on_attack} effects.",
  "infusion_codex.alchemancy:ominous.flavor": "I have a bad feeling about this",
  "infusion_codex.alchemancy:ominous.while_equipped": "Applies Bad Omen to the user for as long as the item is equipped.",
  "infusion_codex.alchemancy:paradoxical.flavor": "Quite the conundrum",
  "infusion_codex.alchemancy:paradoxical.other_effects": "Prevents {system Property Interactions} from affecting the item during the {system Infusion} process.",
  "infusion_codex.alchemancy:parasitic.flavor": "Not so symbiotic after all",
  "infusion_codex.alchemancy:parasitic.on_attack": "Consumes a portion of the target player's Hunger.",
  "infusion_codex.alchemancy:parasitic.while_equipped": "Has a 20% chance every second to damage the user by 1 Health Point in order to replenish the item's durability by 10 points, as long as the item has 10 or more points of durability consumed.",
  "infusion_codex.alchemancy:phase_step.flavor": "Physics are but a mere suggestion",
  "infusion_codex.alchemancy:phase_step.while_equipped": "Grants you the ability to phase through blocks, including those below you. Use with caution.",
  "infusion_codex.alchemancy:phasing.flavor": "Might be smart to put a Hopper under your Forge...",
  "infusion_codex.alchemancy:phasing.when_dropped": "Allows the item to phase through blocks.",
  "infusion_codex.alchemancy:phasing.when_shot": "Allows the projectile to phase through blocks.",
  "infusion_codex.alchemancy:photosynthetic.flavor": "PHOTOSINTHESIZE!",
  "infusion_codex.alchemancy:photosynthetic.while_in_inventory": "Repairs the item for 1 durability point every 30 seconds while the user is under direct sunlight.",
  "infusion_codex.alchemancy:photosynthetic.while_rooted": "Repairs the item for 1 durability point every 15 seconds while under direct sunlight.",
  "infusion_codex.alchemancy:poisonous.flavor": "Could also be venomous",
  "infusion_codex.alchemancy:poisonous.on_attack": "Applies Poison to the target for 5 seconds.",
  "infusion_codex.alchemancy:pristine.durability_consumed": "Consumes 1 {property alchemancy:pristine} point instead of taking damage. The Infusion is removed after 100 {property alchemancy:pristine} points are consumed.",
  "infusion_codex.alchemancy:pristine.flavor": "More than just a pretty face",
  "infusion_codex.alchemancy:quantum_shift.activate": "Swaps the target's equipped {property alchemancy:entangled} items with their counterparts.",
  "infusion_codex.alchemancy:quantum_shift.flavor": "Who said you needed a degree to mess with Quantum Superpositions?",
  "infusion_codex.alchemancy:quantum_shift.stacked_over": "Swaps the target item with its {property alchemancy:entangled} counterpart.",
  "infusion_codex.alchemancy:random.flavor": "Feeling lucky?",
  "infusion_codex.alchemancy:random.other_effects": "Triggers the effect of ANY random {system Infusion} when an {function infusion_function} is triggered.",
  "infusion_codex.alchemancy:reaping.attribute_modifier": "Allows the item to break Hoe-related blocks, starting at wooden tier if the item isn't already a tool.",
  "infusion_codex.alchemancy:reaping.flavor": "Reap what you sow",
  "infusion_codex.alchemancy:reaping.when_shot": "Breaks Hoe-related blocks on impact. The faster the projectile goes, the more likely it is to continue its trajectory after breaking a block.",
  "infusion_codex.alchemancy:reaping.when_used_block": "Can till {item Dirt} into {item Farmland}",
  "infusion_codex.alchemancy:reinforced.attribute_modifier": "Increases the item's {attribute Armor} value by 3 and its {attribute Armor Toughness} by 1.",
  "infusion_codex.alchemancy:reinforced.flavor": "Tougher than the rest of them",
  "infusion_codex.alchemancy:relentless.durability_consumed": "Grants a chance to not consume durability relative to how much health the user has lost, with a maximum chance of 60%.",
  "infusion_codex.alchemancy:relentless.flavor": "Not giving up",
  "infusion_codex.alchemancy:relentless.receive_damage_worn_or_using": "Reduces all incoming damage relative to how much health the user has lost, with a maximum reduction of 20%.",
  "infusion_codex.alchemancy:repelled.flavor": "Not a fan of crowds",
  "infusion_codex.alchemancy:repelled.when_dropped": "Repels the item from every Entity in an 8-block radius.",
  "infusion_codex.alchemancy:repelled.when_shot": "Repels the projectile from every Entity in an 8-block radius.",
  "infusion_codex.alchemancy:repelled.while_equipped": "Repels the user from EVERY Entity in an 8-block radius.",
  "infusion_codex.alchemancy:replicating.flavor": "Five. Hundred. Sparkling Sticks.",
  "infusion_codex.alchemancy:replicating.while_equipped": "Attempts to craft as many replicas of the item by consuming resources in the user's inventory until the item reaches its stack limit.",
  "infusion_codex.alchemancy:resized.attribute_modifier": "Increases the item's {attribute Attack Damage}, and reduces its {attribute Attack Speed} proportionally to its {property alchemancy:resized} value",
  "infusion_codex.alchemancy:resized.flavor": "Honey, I shrunk the tools",
  "infusion_codex.alchemancy:resized.visual": "Scales the item's size equal to its {property alchemancy:resized} value",
  "infusion_codex.alchemancy:revealed.flavor": "Know what's coming",
  "infusion_codex.alchemancy:revealed.visual": "Shows the item's {system Dormant Properties} in its tooltip, making it easier to distinguish what {system Infusions} the item will provide.",
  "infusion_codex.alchemancy:revealing.flavor": "An Alchemancer's greatest asset",
  "infusion_codex.alchemancy:revealing.while_worn_helmet": "Shows every item's {system Dormant Properties} in their tooltips, making it easier to distinguish what {system Infusions} the item will provide.",
  "infusion_codex.alchemancy:rocket_powered.flavor": "Pchooooo!",
  "infusion_codex.alchemancy:rocket_powered.while_using": "Propels the user forwards at high speeds, consuming 2 durability points or the item itself every second.",
  "infusion_codex.alchemancy:rocket_powered.while_worn_boots": "Propels the user upwards at high speeds while jumping, consuming 2 durability points or the item itself every second.",
  "infusion_codex.alchemancy:rooted.flavor": "Plant your roots",
  "infusion_codex.alchemancy:rooted.when_used_block": "Places the item down as a {block Rooted Item} on top of any valid soil, constantly triggering {function while_rooted_unformatted} effects while planted.",
  "infusion_codex.alchemancy:rooted.while_rooted": "Repairs the item for 1 durability point every 5 seconds.",
  "infusion_codex.alchemancy:rotating.flavor": "Get rotated, idiot",
  "infusion_codex.alchemancy:rotating.visual": "Makes the item rotate constantly.",
  "infusion_codex.alchemancy:rotating.when_used_block": "Rotates the facing direction of the targeted block if possible.",
  "infusion_codex.alchemancy:running_start.flavor": "Quick feet, quick trigger",
  "infusion_codex.alchemancy:running_start.while_equipped": "{activate Activates} the item on the user at the start of a sprint, going into Cooldown for 4 seconds after doing so.",
  "infusion_codex.alchemancy:rusty.flavor": "Better with age, but not more durable.",
  "infusion_codex.alchemancy:rusty.other_effects": "Causes the item to build up rust over time or when breaking blocks, increasing its mining speed and its chances of consuming double durability.",
  "infusion_codex.alchemancy:saddled.flavor": "Giddy up!",
  "infusion_codex.alchemancy:saddled.when_used_entity": "Makes the user ride the target. {system Infusions} that attract mobs can be applied to the held item to steer the ridden entity.",
  "infusion_codex.alchemancy:sanitized.flavor": "Squeaky clean",
  "infusion_codex.alchemancy:sanitized.other_effects": "Prevents the item from becoming {property alchemancy:infected}.",
  "infusion_codex.alchemancy:scary.flavor": "Boo!",
  "infusion_codex.alchemancy:scary.while_equipped": "Scares away Animals, Villagers, and Spiders.",
  "infusion_codex.alchemancy:scary.while_worn_helmet": "Prevents Endermen from attack the user after being looked at in the eyes.",
  "infusion_codex.alchemancy:scoping.flavor": "Zoom in and enhance",
  "infusion_codex.alchemancy:scoping.while_held": "Zooms the user's vision in while crouching.",
  "infusion_codex.alchemancy:scoping.while_worn_helmet": "Zooms the user's vision in while crouching.",
  "infusion_codex.alchemancy:scrambled.flavor": "Â§kPractically illegible",
  "infusion_codex.alchemancy:scrambled.visual": "Obfuscates the item's tooltip, making its important traits and information hard to make out.",
  "infusion_codex.alchemancy:sculking.flavor": "Lurking deep below",
  "infusion_codex.alchemancy:sculking.on_kill": "Creates a {item Sculk Bud} at the target's position if possible, consuming the target's dropped Experience Points and converting them into {item Sculk}.",
  "infusion_codex.alchemancy:seeded.flavor": "Seed dispersal",
  "infusion_codex.alchemancy:seeded.on_attack": "Spreads {property alchemancy:seeded} to the target's armor.",
  "infusion_codex.alchemancy:seeded.while_worn": "Causes Chickens to become hostile towards the user.",
  "infusion_codex.alchemancy:seethrough.flavor": "Partially invisible",
  "infusion_codex.alchemancy:seethrough.visual": "Makes the item visually transparent.",
  "infusion_codex.alchemancy:sensitive.flavor": "Try not to hurt its feelings",
  "infusion_codex.alchemancy:sensitive.when_shot": "{activate Activates} on itself if any entity is within a 1-block radius of the projectile, destroying itself after doing so.",
  "infusion_codex.alchemancy:sensitive.while_equipped": "{activate Activates} on the user if any entity is within a 1-block radius of the user, going into Cooldown for 5 seconds after doing so.",
  "infusion_codex.alchemancy:sensitive.while_rooted": "{activate Activates} on itself every second if an entity is standing on the item.",
  "infusion_codex.alchemancy:sharp.attribute_modifier": "Increases {attribute Attack Damage} by 30%.",
  "infusion_codex.alchemancy:sharp.flavor": "Cutting edge",
  "infusion_codex.alchemancy:sharpshooting.flavor": "Nothing gets past my bow",
  "infusion_codex.alchemancy:sharpshooting.when_used": "Fires {item Arrows} as if it were a {item Bow}.",
  "infusion_codex.alchemancy:shattering.flavor": "Out with a bang",
  "infusion_codex.alchemancy:shattering.on_destroy": "{activate Activates} the item on itself and triggers {function on_attack} effects on all entities in a 3-block radius.",
  "infusion_codex.alchemancy:shearing.attribute_modifier": "Allows the item to swiftly break Leaves, Cobwebs, and Wool.",
  "infusion_codex.alchemancy:shearing.flavor": "Beats paper",
  "infusion_codex.alchemancy:shearing.when_shot_from_dispenser": "Can shear Sheep in front of the {item Dispenser}.",
  "infusion_codex.alchemancy:shearing.when_used_entity": "Can shear Sheep.",
  "infusion_codex.alchemancy:shielding.flavor": "Block with your sword, just like the good old days",
  "infusion_codex.alchemancy:shielding.receive_damage_using": "Reduces blockable damage coming from in front by 50%.",
  "infusion_codex.alchemancy:shocking.flavor": "A shock to the system",
  "infusion_codex.alchemancy:shocking.on_attack": "Deal 4 points of chaining {shock Electric} damage to the target and nearby entities. The amount of damage dealt decays over distance and for each consecutive hit.",
  "infusion_codex.alchemancy:shocking.while_rooted": "Constantly emits an electrical field that deals 3 points of chaining {shock Electric} damage to nearby entities. The amount of damage dealt decays over distance and for each consecutive hit.",
  "infusion_codex.alchemancy:slashing.attribute_modifier": "Allows the item to swiftly break bamboo and cobwebs.",
  "infusion_codex.alchemancy:slashing.flavor": "Got my sword. Got my hat. What else do I need?",
  "infusion_codex.alchemancy:slashing.modify_damage": "Performs a sweeping attack when standing still.",
  "infusion_codex.alchemancy:slippery.activate": "Makes the user drop their held item.",
  "infusion_codex.alchemancy:slippery.flavor": "Warned you about the stairs",
  "infusion_codex.alchemancy:slippery.on_attack": "Makes the user drop their held item.",
  "infusion_codex.alchemancy:slippery.while_worn_boots": "Reduces the user's movement friction. Makes the user trip when going down {item Stairs}.",
  "infusion_codex.alchemancy:sluggish.attribute_modifier": "Reduces {attribute Attack Speed} by 55%.",
  "infusion_codex.alchemancy:sluggish.flavor": "Taking it slooooooow",
  "infusion_codex.alchemancy:sluggish.on_attack": "Applies Slowness II to the target for 10 seconds.",
  "infusion_codex.alchemancy:sluggish.while_using": "Doubles the item's use time.",
  "infusion_codex.alchemancy:sluggish.while_worn": "Reduces the user's {attribute Movement Speed} by 55%.",
  "infusion_codex.alchemancy:smelting.block_destroyed": "Smelts all dropped items at the cost of 1 {fire Fuel} point per item.",
  "infusion_codex.alchemancy:smelting.flavor": "Heating up your tools can be a good idea",
  "infusion_codex.alchemancy:smelting.on_kill": "Smelts all dropped items at the cost of 1 {fire Fuel} point per item.",
  "infusion_codex.alchemancy:smelting.other_effects": "{fire Fuel} is automatically restored upon running out if a {item Furnace} fuel is stored inside of the item by the use of {property alchemancy:hollow}.",
  "infusion_codex.alchemancy:smelting.stacked_over": "If the stacked item is a valid {item Furnace} fuel, it is consumed and used to replenish {fire Fuel}.",
  "infusion_codex.alchemancy:smiting.flavor": "Like lightning in a bottle",
  "infusion_codex.alchemancy:smiting.on_crit": "Creates a {item Lightning Bolt} at the target's position, greatly damaging the item or destroying it in the process.",
  "infusion_codex.alchemancy:soul_harvester.flavor": "FETCH ME THEIR SOULS!",
  "infusion_codex.alchemancy:soul_harvester.modify_damage": "Reduces damage dealt by 25%. Increases damage proportional to the target's missing health, with a maximum increase of 55% of the attack's original damage.",
  "infusion_codex.alchemancy:soul_harvester.on_kill": "Heals the user for 10% of the target's {attribute Max Health}.",
  "infusion_codex.alchemancy:soulbind.flavor": "Trapped Spirits",
  "infusion_codex.alchemancy:soulbind.other_effects": "Can be used to create multiple new {system Infusions}.",
  "infusion_codex.alchemancy:soulbind.while_in_inventory": "Has a 2% chance every second of the soul trapped inside of the item of escaping, removing the {system Infusion} and potentially damaging the holder.",
  "infusion_codex.alchemancy:sparking.activate": "Creates a block of {item Fire} at the target's position.",
  "infusion_codex.alchemancy:sparking.flavor": "The perfect match for your stick",
  "infusion_codex.alchemancy:sparking.on_destroy": "Creates a block of {item Fire} at the item's position.",
  "infusion_codex.alchemancy:sparking.receive_damage_equipped": "Creates a block of {item Fire} at the user's position when taking Physical damage.",
  "infusion_codex.alchemancy:sparking.when_shot": "Creates a block of {item Fire} at the projectile's position on impact.",
  "infusion_codex.alchemancy:sparkling.flavor": "Pretty particles",
  "infusion_codex.alchemancy:sparkling.other_effects": "The particles emitted can be determined by the {system Infusions} added to the source of {property alchemancy:sparkling} when {system Infused}.",
  "infusion_codex.alchemancy:sparkling.while_equipped": "Causes the user to emit an aura of particles. Some {system Infusions} disable this behavior, but instead have their own effects be overridden.",
  "infusion_codex.alchemancy:spiking.flavor": "Forward Aerial",
  "infusion_codex.alchemancy:spiking.on_attack": "Knocks targets down, instead of knocking them back.",
  "infusion_codex.alchemancy:spiking.while_worn_boots": "Sets your movement friction to a constant value. ",
  "infusion_codex.alchemancy:spirit_bond.flavor": "Your souls, unite",
  "infusion_codex.alchemancy:spirit_bond.on_heal": "While equipped, restores 5 durability points for each health point restored.",
  "infusion_codex.alchemancy:spirit_bond.receive_damage_equipped": "Loses 1 durability point for each health point lost.",
  "infusion_codex.alchemancy:sporadic.flavor": "Wacky and unpredictable",
  "infusion_codex.alchemancy:sporadic.while_equipped": "{activate Activates} the item on the user at random intervals.",
  "infusion_codex.alchemancy:sporadic.while_rooted": "{activate Activates} the item on the entities standing on the item at random intervals.",
  "infusion_codex.alchemancy:sprint_entangled.flavor": "One for standing still, another for going quick",
  "infusion_codex.alchemancy:sprint_entangled.stacked_on": "Allows the item to permanently store an additional item within itself as long as it has an additional {system Infusion Slot} to apply this {system Infusion} to it. If either item is destroyed or consumed, the other will also be lost.",
  "infusion_codex.alchemancy:sprint_entangled.while_equipped": "Swaps this item with its {property alchemancy:entangled} counterpart while sprinting.",
  "infusion_codex.alchemancy:sticky.flavor": "It just won't come off",
  "infusion_codex.alchemancy:sticky.other_effects": "Prevents the item from being dropped.",
  "infusion_codex.alchemancy:sticky.when_shot_from_dispenser": "Prevents the item from being dispensed.",
  "infusion_codex.alchemancy:sticky.while_rooted": "Greatly hinders the movement of all entities standing inside of the item, as if they were walking through {item Cobweb}.",
  "infusion_codex.alchemancy:sticky.while_worn_boots": "Grants full knockback immunity while grounded. Reduces {attribute Movement Speed} by 25%. Greatly reduces the user's ability to jump while grounded.",
  "infusion_codex.alchemancy:sticky.while_worn_chestplate": "Allows the user to stick to walls.",
  "infusion_codex.alchemancy:sticky.while_worn_helmet": "Allows the user to stick to ceilings.",
  "infusion_codex.alchemancy:sticky.while_worn_leggings": "Allows the user to stick to walls.",
  "infusion_codex.alchemancy:stonecutting.flavor": "To show you the power of Stonecutting, I sawed this rock in half!",
  "infusion_codex.alchemancy:stonecutting.when_used": "Opens the {item Stonecutter} interface.",
  "infusion_codex.alchemancy:stonecutting.when_used_block": "If the user isn't crouching and {property alchemancy:interactable} is present on the item, the targeted block is cut into a random variant obtainable from the {item Stonecutter}.",
  "infusion_codex.alchemancy:sturdy.attribute_modifier": "Increases the item's total durability by 20%.",
  "infusion_codex.alchemancy:sturdy.flavor": "Rock and Stone!",
  "infusion_codex.alchemancy:sweet.attribute_modifier": "If the item can be eaten, it's saturation gain is increased by 50%, and it can be eaten even if the user isn't hungry.",
  "infusion_codex.alchemancy:sweet.flavor": "Might give you a sugar rush",
  "infusion_codex.alchemancy:sweet.while_equipped": "Makes Animals, Spiders, and Allays follow the user.",
  "infusion_codex.alchemancy:swift.flavor": "Run like the wind",
  "infusion_codex.alchemancy:swift.while_held_mainhand": "Increases the user's {attribute Attack Speed} by 25%.",
  "infusion_codex.alchemancy:swift.while_using": "Halves the item's use time.",
  "infusion_codex.alchemancy:swift.while_worn_leggings": "Increases the user's {attribute Movement Speed} by 55%.",
  "infusion_codex.alchemancy:targeted.flavor": "Like having an apple on your head",
  "infusion_codex.alchemancy:targeted.when_dropped": "Causes all Projectiles in a 16-block radius to home in on the item.",
  "infusion_codex.alchemancy:targeted.when_shot": "Causes all Projectiles in a 16-block radius to start following the projectile.",
  "infusion_codex.alchemancy:targeted.while_equipped": "Causes all Projectiles in a 16-block radius to home in on the user.",
  "infusion_codex.alchemancy:targeted.while_rooted": "Causes all Projectiles in a 16-block radius to home in on the item.",
  "infusion_codex.alchemancy:throwable.flavor": "For three!",
  "infusion_codex.alchemancy:throwable.when_shot_from_dispenser": "Throws the item like a Projectile, triggering {function when_shot} effects when appropriate. The thrown item takes 10 durability points or is destroyed when it hits a block or an entity.",
  "infusion_codex.alchemancy:throwable.when_used": "Throws the item like a Projectile, triggering {function when_shot} effects when appropriate. The thrown item takes 10 durability points or is destroyed when it hits a block or an entity.",
  "infusion_codex.alchemancy:ticking.flavor": "Tick tock",
  "infusion_codex.alchemancy:ticking.while_in_inventory": "{activate Activates} the item on the user after 5 seconds of being picked up. The timer is automatically reset if {property alchemancy:interactable} is present on the item. Timer length is halved if {property alchemancy:swift} is present. Timer length is doubled if {property alchemancy:sluggish} or {property alchemancy:lazy} is present.",
  "infusion_codex.alchemancy:tinted.flavor": "Bring color to the world",
  "infusion_codex.alchemancy:tinted.other_effects": "When a {item Dye} is {system Infused} onto an item, its color will be blended with the item's current tint. If a {item Chroma Lens} is used instead, the item's tint will be overridden without consuming the lens. When multiple {item Chroma Lenses} are {system Infused} at a time, the item's tint color will gradually cycle through each of the {system Infused} colors.",
  "infusion_codex.alchemancy:tinted.visual": "Applies a colored tint to the item.",
  "infusion_codex.alchemancy:tinted.when_used_block": "If used on a water-filled {item Cauldron}, the item's tint will be cleared, removing this {system Infusion} in the process.",
  "infusion_codex.alchemancy:tinted_lens.flavor": "Rose-colored glasses",
  "infusion_codex.alchemancy:tinted_lens.while_worn_helmet": "Applies a colored tint to the user's vision equal to the item's {property alchemancy:tinted} color. Prevents Endermen from attack the user after being looked at in the eyes.",
  "infusion_codex.alchemancy:tipsy.flavor": "Better lay off the Pufferfish for a while",
  "infusion_codex.alchemancy:tipsy.on_attack": "Applies Nausea to the target for 10 seconds.",
  "infusion_codex.alchemancy:tipsy.while_equipped": "Applies Nausea to the user for 10 seconds.",
  "infusion_codex.alchemancy:toggleable.flavor": "Pull the lever and the lights go out",
  "infusion_codex.alchemancy:toggleable.stacked_on": "Toggles the item's {system Infusions} on/off when right-clicked with an empty cursor.",
  "infusion_codex.alchemancy:toggleable.when_used": "Toggles the item's {system Infusions} on/off when used while crouching.",
  "infusion_codex.alchemancy:undead.durability_consumed": "Damaging the item restores durability points instead of consuming them, breaking once the item gets fully repaired.",
  "infusion_codex.alchemancy:undead.flavor": "Nearly almost dead but not quite",
  "infusion_codex.alchemancy:undying.durability_consumed": "Restores 60% of the item's durability before breaking, removing the {system Infusion} in the process.",
  "infusion_codex.alchemancy:undying.flavor": "A second wind",
  "infusion_codex.alchemancy:unmovable.flavor": "Locked into place",
  "infusion_codex.alchemancy:unmovable.other_effects": "Prevents the item from being dropped or moved into a different slot. Can be removed by stacking an item with {property alchemancy:binding} over this one.",
  "infusion_codex.alchemancy:use_entangled.flavor": "Innocuous Double",
  "infusion_codex.alchemancy:use_entangled.stacked_on": "Allows the item to permanently store an additional item within itself as long as it has an additional {system Infusion Slot} to apply this {system Infusion} to it. If either item is destroyed or consumed, the other will also be lost.",
  "infusion_codex.alchemancy:use_entangled.when_used": "Swaps this item with its {property alchemancy:entangled} counterpart.",
  "infusion_codex.alchemancy:vacuuming.flavor": "An attractive personality",
  "infusion_codex.alchemancy:vacuuming.when_dropped": "Slowly pulls in all entities within an 8-block radius.",
  "infusion_codex.alchemancy:vacuuming.when_shot": "Slowly pulls in all entities within an 8-block radius.",
  "infusion_codex.alchemancy:vacuuming.while_rooted": "Slowly pulls in all entities except for Players within an 8-block radius.",
  "infusion_codex.alchemancy:vacuuming.while_using": "Slowly pulls in ALL entities within an 8-block radius.",
  "infusion_codex.alchemancy:vampiric.flavor": "It doesn't suck... it scrapes",
  "infusion_codex.alchemancy:vampiric.modify_damage": "Heals the user for 20% of the damage dealt.",
  "infusion_codex.alchemancy:vampiric.while_equipped": "Has a 40% chance every second of consuming 1 point of durability under broad daylight, with a 10% chance on top of that of instead setting the user ablaze for 4 seconds.",
  "infusion_codex.alchemancy:vaultpicking.flavor": "Hack the system",
  "infusion_codex.alchemancy:vaultpicking.when_used_block": "Resets a {item Trial Vault}'s inner mechanisms at the cost of 50 durability points or the item, allowing only the user to insert another key and gather additional loot.",
  "infusion_codex.alchemancy:vengeful.flavor": "An eye for an eye",
  "infusion_codex.alchemancy:vengeful.modify_damage": "Deals 85% more damage against the entity that last damaged the user, and 35% less damage to everyone else.",
  "infusion_codex.alchemancy:voidborn.flavor": "The abyss stares back",
  "infusion_codex.alchemancy:voidborn.other_effects": "This {system Infusion} can be obtained by tossing an item with {property alchemancy:depth_dweller} and {property alchemancy:undying} into the void.",
  "infusion_codex.alchemancy:voidborn.when_dropped": "Levitates the item upwards for a short period of time after falling into the void.",
  "infusion_codex.alchemancy:voidborn.while_equipped": "Grants immunity to Void damage and {property alchemancy:voidtouch}. Levitates the user upwards for a short period of time after falling into the void.",
  "infusion_codex.alchemancy:voidtouch.flavor": "Existence is but an opinion",
  "infusion_codex.alchemancy:voidtouch.on_attack": "Deletes the target from existence, completely destroying the item in the process.",
  "infusion_codex.alchemancy:warding.flavor": "Become an Armored Bastion",
  "infusion_codex.alchemancy:warding.receive_damage_worn_or_using": "Reduces ALL incoming damage by 15%.",
  "infusion_codex.alchemancy:warped.flavor": "A glimpse into my twisted mind",
  "infusion_codex.alchemancy:warped.other_effects": "Alters every compatible {system Infusion} on the item at the end of the {system Infusion Process}, often turning them into an opposite, or related counterpart.",
  "infusion_codex.alchemancy:wave_rider.flavor": "I Think I saw a religious figure do this once",
  "infusion_codex.alchemancy:wave_rider.while_worn_boots": "Allows the user to stand, jump, and walk on {item Water}, unless they're crouching.",
  "infusion_codex.alchemancy:waxed.flavor": "Forget sunscreen, we got BEES!",
  "infusion_codex.alchemancy:waxed.receive_damage_worn": "Prevents the user from taking {fire Fire} damage up to 50 times before the {system Infusion} is removed.",
  "infusion_codex.alchemancy:wayfinding.flavor": "Always know the way back",
  "infusion_codex.alchemancy:wayfinding.visual": "Rotates the item to point towards the tracked position, or if none is present the user's spawn point, the exit portal in {end The End}, or the place the user entered the dimension from.",
  "infusion_codex.alchemancy:wayfinding.when_used_block": "Saves the targeted {item Lodestone}'s position as a tracked position if none is present.",
  "infusion_codex.alchemancy:wayfinding.when_used_entity": "Saves the targeted Player as a tracked position if none is present.",
  "infusion_codex.alchemancy:wayward_warp.activate": "Teleports the target to the saved destination if on the same dimension, consuming 10 durability points or the item in the process.",
  "infusion_codex.alchemancy:wayward_warp.after_use": "Teleports the user to the saved destination if on the same dimension, consuming 10 durability points or the item in the process.",
  "infusion_codex.alchemancy:wayward_warp.flavor": "Always skip the way back",
  "infusion_codex.alchemancy:wayward_warp.when_used_block": "Saves the targeted {item Lodestone}'s position as a destination if none is present.",
  "infusion_codex.alchemancy:wayward_warp.when_used_entity": "Saves the targeted Player as a destination if none is present.",
  "infusion_codex.alchemancy:weak.attribute_modifier": "Reduces {attribute Armor} value by 1.",
  "infusion_codex.alchemancy:weak.flavor": "Doesn't even lift",
  "infusion_codex.alchemancy:weak.modify_damage": "Reduces damage dealt by 50%.",
  "infusion_codex.alchemancy:weak.while_worn": "Increases incoming damage by 20%.",
  "infusion_codex.alchemancy:wealthy.attribute_modifier": "Increases the item's {enchantment minecraft:fortune} and {enchantment minecraft:looting} levels by 1.",
  "infusion_codex.alchemancy:wealthy.flavor": "Kaching!",
  "infusion_codex.alchemancy:wealthy.while_equipped": "Makes Villagers and Pillagers follow the user.",
  "infusion_codex.alchemancy:wet.flavor": "Soak it in",
  "infusion_codex.alchemancy:wet.on_attack": "Reduces the target's time on fire by half a second.",
  "infusion_codex.alchemancy:wet.receive_damage_worn": "Increases the amount of {shock Electric} damage received by 10%.",
  "infusion_codex.alchemancy:wet.while_rooted": "Waters {item Farmland} in a 4-block radius. Extinguishes all entities standing inside of the item.",
  "infusion_codex.alchemancy:wet.while_worn": "Reduces the user's amount of time set on fire by half.",
  "infusion_codex.alchemancy:wind_charged.flavor": "Do the windy thing",
  "infusion_codex.alchemancy:wind_charged.on_crit": "Creates a burst of wind around the target, greatly damaging the item or destroying it in the process.",
  "infusion_codex.alchemancy:wise.attribute_modifier": "Increases the item's {attribute Enchantability} by 5.",
  "infusion_codex.alchemancy:wise.flavor": "Tricking a rock into thinking",
  "infusion_codex.alchemancy:wise.while_held_mainhand": "Doubles the experience yield from Mobs and blocks.",
  "infusion_codex.alchemancy:wise.while_worn": "Increases the experience yield from Mobs and blocks by 10%.",
  "infusion_codex.alchemancy:world_obliterator.flavor": "You are no god... but I shall feast upon your essence regardless!",
  "infusion_codex.alchemancy:world_obliterator.stacked_on": "Sets the cursor item as the item's Targeted Block, only allowing it to absorb blocks of that same type. The Target Block can be cleared by right-clicking the item with an empty cursor.",
  "infusion_codex.alchemancy:world_obliterator.while_using": "Rapidly breaks and absorbs blocks within a 5-block radius, consuming 1 durability point for each block destroyed."
}